mod WATERHEATERERRCONTROLLER is
  protecting CONTROLLERS .

  vars H W WH T C DCB AQ : Oid .
  var DG : Temperature .
  var AQS : AirqualityStatus .
  var TI : Time .
  var TS : Timesteps .
  vars A A1 A2 : Attribute .
  vars B B1 B2 : Bool .


  *** Rules
  *** If T ok, AQ ok -> H off, W closed, WH off
  crl [WhErrContrTempOkAqOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCB :DegradedContrB | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg hOff from DCB to H)
    (msg whOff from DCB to WH)
    (msg closed from DCB to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCB :DegradedContrB | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if hot(DG) == false /\ cold(DG) == false /\ aqok(AQS) == true
    [print "rule: [WhErrContrTempOkAqOk]"] .

  *** If T ok, AQ not ok -> H fairlyhot, W halfopen, WH off
  crl [WhErrContrTempOkAqNotOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCB :DegradedContrB | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg fairlyhot from DCB to H)
    (msg whOff from DCB to WH)
    (msg halfopen from DCB to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCB :DegradedContrB | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if hot(DG) == false /\ cold(DG) == false /\ aqok(AQS) == false
    [print "rule: [WhErrContrTempOkAqNotOk]"] .

  *** If T low, AQ ok -> H veryhot, W closed, WH off
  crl [WhErrContrTempLowAqOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCB :DegradedContrB | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg veryhot from DCB to H)
    (msg whOff from DCB to WH)
    (msg closed from DCB to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCB :DegradedContrB | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if cold(DG) == true /\ aqok(AQS) == true
    [print "rule: [WhErrContrTempLowAqOk]"] .

  *** If T low, AQ not ok -> H veryhot, W halfopen, WH off
  crl [WhErrContrTempLowAqNotOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCB :DegradedContrB | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg veryhot from DCB to H)
    (msg whOff from DCB to WH)
    (msg halfopen from DCB to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCB :DegradedContrB | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if cold(DG) == true /\ aqok(AQS) == false
    [print "rule: [WhErrContrTempLowAqNotOk]"] .

  *** If T high -> H fairlyhot, W halfopen, WH off
  crl [WhErrContrTempHigh] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCB :DegradedContrB | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg fairlyhot from DCB to H)
    (msg whOff from DCB to WH)
    (msg halfopen from DCB to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCB :DegradedContrB | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if hot(DG) == true
    [print "rule: [WhErrContrTempHigh]"] .


  endm
