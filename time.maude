mod TIME is
  protecting ACTUATORS .
  protecting NAT .

  sort Clock .
  subsort Clock < Configuration .

  sort Timesteps Time .
  subsort Nat < Timesteps .
  subsort Nat < Time .                  *** TODO: Should we specify that 0 <= Time < 24?

  op < _ :Clock | Timesteps: _, Time: _ > : Oid Timesteps Time -> Clock [format (ntb b b b b b b b b b o)] .

  op getTime : Timesteps -> Time .
  op morning? : Time -> Bool .            *** For the controllers it's important to know whether it's morning or not

  vars TS : Timesteps .
  var N : Nat .

  *** Compute time with given time steps as Timesteps mod 24
  eq getTime(TS) = TS rem 24 .

  *** Define morning to be between 6 and 12 o'clock.
  ceq morning?(N) = true if 6 <= N /\ N <= 12 .
  ceq morning?(N) = false if N < 6 .
  ceq morning?(N) = false if N > 12 .



  vars H WH W T C : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var TI : Time .
  var RAT : RuleAppliedTemp .
  var RAAQ : RuleAppliedAQ .
  vars ET ET1 ET2 : EffectTemp .
  vars EAQ EAQ1 EAQ2 : EffectAQ .


  *** Rule time
  rl [timeAdvances] :
    < H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no >
    < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2 >
    < C :Clock | Timesteps: TS, Time: TI >
    =>
    < H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no >
    < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2 >
    < C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) >
    [print "rule: [timeAdvancesHWH]"] .

endm
eof

*** Case 1: heater is active and waterheater is not active
*** If both the heater and the window affected the temperature in the current hour, then time goes to the next hour and the flags for the heater and window change (rules can be applied again)
rl [timeAdvancesH] :
  < H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: no >
  < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2 >
  < C :Clock | Timesteps: TS, Time: TI >
  =>
  < H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: no >
  < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2 >
  < C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) >
  [print "rule: [timeAdvancesH]"] .

*** Case 2: water heater is active and heater is not active
rl [timeAdvancesWH] :
  < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: no >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
  < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2 >
  < C :Clock | Timesteps: TS, Time: TI >
  =>
  < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: no >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
  < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2 >
  < C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) >
  [print "rule: [timeAdvancesWH]"] .

*** Case 3: both the water heater and the heater are active
*** Case 2: water heater is active and heater is not active
rl [timeAdvancesHWH] :
  < H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
  < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2 >
  < C :Clock | Timesteps: TS, Time: TI >
  =>
  < H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
  < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2 >
  < C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) >
  [print "rule: [timeAdvancesHWH]"] .
