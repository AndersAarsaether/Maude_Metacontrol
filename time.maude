mod TIME is
  protecting ACTUATORS .

  sort Clock TimedConfiguration .
  subsort Clock < Configuration .

  sort Timesteps Time .
  subsort Nat < Timesteps .
  subsort Nat < Time .                  *** TODO: Should we specify that 0 <= Time < 24?

  *** We need the timed configuration to ensure that the time advance rule is only applied to the full configuration
  op {_} : Configuration -> TimedConfiguration .

  op < _ :Clock | Timesteps: _, Time: _ > : Oid Timesteps Time -> Clock [format (ntb b b b b b b b b b o)] .

  op getTime : Timesteps -> Time .
  op morning? : Time -> Bool .              *** For the controllers it's important to know whether it's morning or not

  op canAdvance : Configuration -> Bool .   *** Determines whether the time can advance or not
  op advance : Configuration -> Configuration .   *** Advances the time by one step and sets the rule guards to 'no'




  vars TS : Timesteps .
  var N : Nat .
  vars H WH W T C CC EC AQ : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var TI : Time .
  var RA : RuleAppliedTemp .
  var RAAQ : RuleAppliedAQ .
  vars CONF : Configuration .
  var A : Attribute .

  *** Compute time with given time steps as Timesteps mod 24
  eq getTime(TS) = TS rem 24 .

  *** Define morning to be between 6 and 12 o'clock.
  ceq morning?(N) = true if 6 <= N /\ N <= 12 .
  eq morning?(N) = false [owise] .

  *** We don't want to specify for each component in the system, that it has no effect on the time, so we only specify in which cases that time should NOT advance
  eq canAdvance(< H :Heater | RuleAppliedTemp: no, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< H :Heater | RuleAppliedTemp: no, RuleAppliedAQ: yes, A > CONF) = false .
  eq canAdvance(< H :Heater | RuleAppliedTemp: yes, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< WH :Waterheater | RuleAppliedTemp: no, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< WH :Waterheater | RuleAppliedTemp: no, RuleAppliedAQ: yes, A > CONF) = false .
  eq canAdvance(< WH :Waterheater | RuleAppliedTemp: yes, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< W :Window | RuleAppliedTemp: no, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< W :Window | RuleAppliedTemp: no, RuleAppliedAQ: yes, A > CONF) = false .
  eq canAdvance(< W :Window | RuleAppliedTemp: yes, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(CONF) = true [owise] .

  *** These equations can be applied independent of the rule applied statuses of the actuators (maybe we want to use it for something else too)
  eq advance(< H :Heater | RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, A > CONF)
      = < H :Heater | RuleAppliedTemp: no, RuleAppliedAQ: no, A > advance(CONF) .
  eq advance(< WH :Waterheater | RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, A > CONF)
      = < WH :Waterheater | RuleAppliedTemp: no, RuleAppliedAQ: no, A > advance(CONF) .
  eq advance(< W :Window | RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, A > CONF)
      = < W :Window | RuleAppliedTemp: no, RuleAppliedAQ: no, A > advance(CONF) .
  eq advance(CONF) = CONF [owise] .


  crl [timeAdvances] :
    {< C :Clock | Timesteps: TS, Time: TI > CONF}
    =>
    {< C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) > advance(CONF)}
    if canAdvance(CONF)
    [print "rule: [timeAdvances]"] .



endm
eof

*** Rule time
rl [timeAdvances] :
  < H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectTemp: ET, EffectAQ: EAQ, Broken: no >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectTemp: ET1, EffectAQ: EAQ1, Broken: no >
  < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectTemp: ET2, EffectAQ: EAQ2, Broken: no >
  < C :Clock | Timesteps: TS, Time: TI >
  =>
  < H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectTemp: ET, EffectAQ: EAQ, Broken: no >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectTemp: ET1, EffectAQ: EAQ1, Broken: no >
  < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectTemp: ET2, EffectAQ: EAQ2, Broken: no >
  < C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) >
  [print "rule: [timeAdvancesHWH]"] .
