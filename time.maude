mod TIME is
  protecting COMFORTCONTROLLER .
  protecting ECOCONTROLLER .
  protecting HEATERERRCONTROLLER .
  protecting WATERHEATERERRCONTROLLER .
  protecting WINDOWERRCONTROLLER .
  protecting QUALITYATTRIBUTES .

  var TS : Timesteps .
  var N : Nat .
  vars H WH W T C CC EC AQ HEC WHEC WEC : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var TI : Time .
  var RA : RuleAppliedTemp .
  var RAAQ : RuleAppliedAQ .
  var RAC : RuleAppliedContr .
  vars CONF : Configuration .
  var A : Attribute .

  *** Determines whether the time can advance or not
  op canAdvance : Configuration -> Bool .
  *** We don't want to specify for each component in the system, that it has no effect on the time, so we only specify in which cases that time should NOT advance
  eq canAdvance(< H :Heater | RuleAppliedTemp: no, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< H :Heater | RuleAppliedTemp: no, RuleAppliedAQ: yes, A > CONF) = false .
  eq canAdvance(< H :Heater | RuleAppliedTemp: yes, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< WH :Waterheater | RuleAppliedTemp: no, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< WH :Waterheater | RuleAppliedTemp: no, RuleAppliedAQ: yes, A > CONF) = false .
  eq canAdvance(< WH :Waterheater | RuleAppliedTemp: yes, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< W :Window | RuleAppliedTemp: no, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< W :Window | RuleAppliedTemp: no, RuleAppliedAQ: yes, A > CONF) = false .
  eq canAdvance(< W :Window | RuleAppliedTemp: yes, RuleAppliedAQ: no, A > CONF) = false .
  eq canAdvance(< HEC :HeaterErrController | Selected: yes , RuleApplied: no >) = false .
  eq canAdvance(< WHEC :WaterheaterErrController | Selected: yes, RuleApplied: no >) = false .
  eq canAdvance(< WEC :WindowErrController | Selected: yes, RuleApplied: no >) = false .
  eq canAdvance(< CC :ComfortController | Selected: yes, RuleApplied: no >) = false .
  eq canAdvance(< EC :EcoController | Selected: yes, RuleApplied: no >) = false .
  eq canAdvance(CONF) = true [owise] .

  *** Advances the time by one step and sets the rule guards to 'no'
  op advance : Configuration -> Configuration .
  *** These equations can be applied independent of the rule applied statuses of the actuators (maybe we want to use it for something else too)
  eq advance(< H :Heater | RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, A > CONF)
      = < H :Heater | RuleAppliedTemp: no, RuleAppliedAQ: no, A > advance(CONF) .
  eq advance(< WH :Waterheater | RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, A > CONF)
      = < WH :Waterheater | RuleAppliedTemp: no, RuleAppliedAQ: no, A > advance(CONF) .
  eq advance(< W :Window | RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, A > CONF)
      = < W :Window | RuleAppliedTemp: no, RuleAppliedAQ: no, A > advance(CONF) .
  eq advance(< HEC :HeaterErrController | Selected: yes, RuleApplied: RAC > CONF)
      = < HEC :HeaterErrController | Selected: yes, RuleApplied: no > advance(CONF) .
  eq advance(< WHEC :WaterheaterErrController | Selected: yes, RuleApplied: RAC > CONF)
      = < WHEC :WaterheaterErrController | Selected: yes, RuleApplied: no > advance(CONF) .
  eq advance(< WEC :WindowErrController | Selected: yes, RuleApplied: RAC > CONF)
      = < WEC :WindowErrController | Selected: yes, RuleApplied: no > advance(CONF) .
  eq advance(< CC :ComfortController | Selected: yes, RuleApplied: RAC > CONF)
      = < CC :ComfortController | Selected: yes, RuleApplied: no > advance(CONF) .
  eq advance(< EC :EcoController | Selected: yes, RuleApplied: RAC > CONF)
      = < EC :EcoController | Selected: yes, RuleApplied: no > advance(CONF) .
  eq advance(CONF) = CONF [owise] .


  crl [timeAdvances] :
    {< C :Clock | Timesteps: TS, Time: TI > CONF}
    =>
    {< C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) > advance(CONF)}
    if canAdvance(CONF)
    [print "rule: [timeAdvances]"] .



endm
eof

*** Rule time
rl [timeAdvances] :
  < H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectTemp: ET, EffectAQ: EAQ, Broken: no >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectTemp: ET1, EffectAQ: EAQ1, Broken: no >
  < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectTemp: ET2, EffectAQ: EAQ2, Broken: no >
  < C :Clock | Timesteps: TS, Time: TI >
  =>
  < H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectTemp: ET, EffectAQ: EAQ, Broken: no >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectTemp: ET1, EffectAQ: EAQ1, Broken: no >
  < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectTemp: ET2, EffectAQ: EAQ2, Broken: no >
  < C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) >
  [print "rule: [timeAdvancesHWH]"] .
