mod TIME is
  protecting TEMPERATURE .
  protecting AIRQUALITY .

  sort Clock TimedConfiguration .
  subsort Clock TimedConfiguration < Configuration .

  sort Timesteps Time .
  subsort Nat < Timesteps .
  subsort Nat < Time .                  *** TODO: Should we specify that 0 <= Time < 24?

  *** We need the timed configuration to ensure that the time advance rule is only applied to the full configuration
  op {_} : Configuration -> TimedConfiguration .

  op < _ :Clock | Timesteps: _, Time: _ > : Oid Timesteps Time -> Clock [format (ntb b b b b b b b b b o)] .

  op getTime : Timesteps -> Time .
  op morning? : Time -> Bool .              *** For the controllers it's important to know whether it's morning or not

  op canAdvance : Configuration -> Bool .   *** Determines whether the time can advance or not
  op advance : TimedConfiguration -> TimedConfiguration .   *** Advances the time by one step and sets the rule guards to 'no'




  vars TS : Timesteps .
  var N : Nat .
  vars H WH W T C CC EC AQ : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var TI : Time .
  var RAT : RuleAppliedTemp .
  var RAAQ : RuleAppliedAQ .
  vars ET ET1 ET2 : EffectTemp .
  vars EAQ EAQ1 EAQ2 : EffectAQ .
  var B : Broken .
  vars CONF1 CONF2 : Configuration .

  *** Compute time with given time steps as Timesteps mod 24
  eq getTime(TS) = TS rem 24 .

  *** Define morning to be between 6 and 12 o'clock.
  ceq morning?(N) = true if 6 <= N /\ N <= 12 .
  eq morning?(N) = false [owise] .

  *** We don't want to specify for each component in the system, that it has no effect on the time, so we only specify in which cases that time should NOT advance
  eq canAdvance(< H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > CONF1) = false .
  eq canAdvance(< H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > CONF1) = false .
  eq canAdvance(< H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > CONF1) = false .
  eq canAdvance(< WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B > CONF1) = false .
  eq canAdvance(< WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: yes, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B > CONF1) = false .
  eq canAdvance(< WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: no, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B > CONF1) = false .
  eq canAdvance(< W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: B > CONF1) = false .
  eq canAdvance(< W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: B > CONF1) = false .
  eq canAdvance(< W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: B > CONF1) = false .
  eq canAdvance(CONF1) = true [owise] .



  *** Rule time
  rl [timeAdvances] :
    < H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no >
    < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: no >
    < C :Clock | Timesteps: TS, Time: TI >
    =>
    < H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no >
    < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: no >
    < C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) >
    [print "rule: [timeAdvancesHWH]"] .

endm
eof

*** Case 1: heater is active and waterheater is not active
*** If both the heater and the window affected the temperature in the current hour, then time goes to the next hour and the flags for the heater and window change (rules can be applied again)
rl [timeAdvancesH] :
  < H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: no >
  < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: no >
  < C :Clock | Timesteps: TS, Time: TI >
  =>
  < H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: no >
  < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: no >
  < C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) >
  [print "rule: [timeAdvancesH]"] .

*** Case 2: water heater is active and heater is not active
rl [timeAdvancesWH] :
  < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: no >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
  < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: no >
  < C :Clock | Timesteps: TS, Time: TI >
  =>
  < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: no >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
  < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: no >
  < C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) >
  [print "rule: [timeAdvancesWH]"] .

*** Case 3: both the water heater and the heater are active
*** Case 2: water heater is active and heater is not active
rl [timeAdvancesHWH] :
  < H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
  < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: no >
  < C :Clock | Timesteps: TS, Time: TI >
  =>
  < H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
  < WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
  < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: no >
  < C :Clock | Timesteps: TS + 1, Time: getTime(TS + 1) >
  [print "rule: [timeAdvancesHWH]"] .
