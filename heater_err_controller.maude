mod HEATERERRCONTROLLER is
  protecting CONTROLLERS .

  vars H W WH T C DCA AQ : Oid .
  var DG : Temperature .
  var AQS : AirqualityStatus .
  var TI : Time .
  var TS : Timesteps .
  vars A A1 A2 : Attribute .
  vars B B1 B2 : Bool .
  vars TL AL : TVPList .


  *** Rules that hold for both the morning and not the morning
  *** If T ok, AQ ok -> H off, W closed, WH on
  crl [HErrContrTempOkAqOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < DCA :DegradedContrA | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg hOff from DCA to H)
    (msg on from DCA to WH)
    (msg closed from DCA to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < DCA :DegradedContrA | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if hot(DG) == false /\ cold(DG) == false /\ aqok(AQS) == true
    [print "rule: [HErrContrTempOkAqOk]"] .

  *** If T ok, AQ not ok -> H off, W half open, WH on
  crl [HErrContrTempOkAqNotOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCA :DegradedContrA | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg hOff from DCA to H)
    (msg on from DCA to WH)
    (msg halfopen from DCA to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < DCA :DegradedContrA | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if hot(DG) == false /\ cold(DG) == false /\ aqok(AQS) == false
    [print "rule: [HErrContrTempOkAqNotOk]"] .

  *** If T low -> H off, W closed, WH on
  crl [HErrContrTempLow] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < DCA :DegradedContrA | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg hOff from DCA to H)
    (msg on from DCA to WH)
    (msg closed from DCA to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < DCA :DegradedContrA | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if cold(DG) == true
    [print "rule: [HErrContrTempLow]"] .

  ***  If T high -> H off, W half open, WH off
  crl [HErrContrTempHigh] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < DCA :DegradedContrA | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg hOff from DCA to H)
    (msg whOff from DCA to WH)
    (msg halfopen from DCA to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < DCA :DegradedContrA | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if hot(DG) == true
    [print "rule: [HErrContrTempHigh]"] .
endm
