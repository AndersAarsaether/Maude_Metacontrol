mod PHYSICS is
  protecting STRING .
  protecting FLOAT .
  protecting NAT .

  *** The components of the system
  sorts Oid Heater Window Thermometer Clock Configuration .
  subsorts Heater Window Thermometer Clock < Configuration .
  subsort String < Oid .  *** Object identifier

  op none : -> Configuration [ctor] .
  op __ : Configuration Configuration -> Configuration [ctor comm assoc id: none] .

  *** The statuses of the components
  sorts HeaterStatus WindowStatus Temperature Time Flag Effect .
  subsort Float < Temperature .
  subsort Float < Effect .          *** The effect indicates how much the window and heater can decrease and increase the temperature in the room.
  subsort Nat < Time .

  *** The values the statuses can take
  ops off fairlyhot veryhot : -> HeaterStatus .
  ops open halfopen closed : -> WindowStatus .
  ops yes no : -> Flag .

  *** Specification of the components
  op < _ :Heater | Status: _, RuleApplied: _, EffectsTemp: _  > : Oid HeaterStatus Flag Effect -> Heater [format (ntb b b b b b b b b b b b b o)] .
  op < _ :Window | Status: _, RuleApplied: _, EffectsTemp: _  > : Oid WindowStatus Flag Effect -> Window [format (ntb b b b b b b b b b b b b o)] .
  op < _ :Thermometer | Degrees: _ > : Oid Temperature -> Thermometer [format (ntb b b b b b b o)] .
  op < _ :Clock | Time: _ > : Oid Time -> Clock [format (ntb b b b b b b o)] .

  vars H W T C : Oid .
  var DG : Temperature .
  var HS : HeaterStatus .
  var WS : WindowStatus .
  var TI : Time .
  var ET : Effect .

  *** Rules heater
  *** If the heater did not affect the temperature in the room in the current hour yet, then the temperature increases depending on the status of the heater.
  rl [heaterOff] :
    < H :Heater | Status: off, RuleApplied: no, EffectsTemp: ET > < T :Thermometer | Degrees: DG >
    =>
    < H :Heater | Status: off, RuleApplied: yes, EffectsTemp: ET > < T :Thermometer | Degrees: DG > .

  rl [heaterFairlyhot] :
    < H :Heater | Status: fairlyhot, RuleApplied: no, EffectsTemp: ET > < T :Thermometer | Degrees: DG >
    =>
    < H :Heater | Status: fairlyhot, RuleApplied: yes, EffectsTemp: ET > < T :Thermometer | Degrees: DG + ET > .

  rl [heaterVeryhot] :
    < H :Heater | Status: veryhot, RuleApplied: no, EffectsTemp: ET > < T :Thermometer | Degrees: DG >
    =>
    < H :Heater | Status: veryhot, RuleApplied: yes, EffectsTemp: ET > < T :Thermometer | Degrees: DG + 2.0 * ET > .

  *** Rules Window
  *** If the window did not affect the temperature in the room in the current hour yet, then the temperature decreases depending on the status of the window.
  rl [windowClosed] :
    < W :Window | Status: closed, RuleApplied: no, EffectsTemp: ET > < T :Thermometer | Degrees: DG >
    =>
    < W :Window | Status: closed, RuleApplied: yes, EffectsTemp: ET > < T :Thermometer | Degrees: DG > .

  rl [windowHalfopen] :
    < W :Window | Status: halfopen, RuleApplied: no, EffectsTemp: ET > < T :Thermometer | Degrees: DG >
    =>
    < W :Window | Status: halfopen, RuleApplied: yes, EffectsTemp: ET > < T :Thermometer | Degrees: DG + ET > .

  rl [windowOpen] :
    < W :Window | Status: open, RuleApplied: no, EffectsTemp: ET > < T :Thermometer | Degrees: DG >
    =>
    < W :Window | Status: open, RuleApplied: yes, EffectsTemp: ET > < T :Thermometer | Degrees: DG + 2.0 * ET > .

  *** Rule time
  *** If both the heater and the window affected the temperature in the current hour, then time goes to the next hour and the flags for the heater and window change (rules can be applied again)
  rl [timeAdvances] :
    < H :Heater | Status: HS, RuleApplied: yes, EffectsTemp: ET > < W :Window | Status: WS, RuleApplied: yes, EffectsTemp: ET > < C :Clock | Time: TI >
    =>
    < H :Heater | Status: HS, RuleApplied: no, EffectsTemp: ET > < W :Window | Status: WS, RuleApplied: no, EffectsTemp: ET > < C :Clock | Time: TI + 1 > .


endm
