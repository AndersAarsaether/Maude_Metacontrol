mod PHYSICS is
  protecting STRING .
  protecting FLOAT .
  protecting NAT .

  *** The components of the system
  sorts Oid Heater Waterheater Window Thermometer Clock Configuration .
  subsorts Heater Window Waterheater Thermometer Clock < Configuration .
  subsort String < Oid .  *** Object identifier

  op none : -> Configuration [ctor] .
  op __ : Configuration Configuration -> Configuration [ctor comm assoc id: none] .

  *** The statuses of the components
  sorts HeaterStatus WaterheaterStatus WindowStatus Temperature Time .
  subsort Float < Temperature .
  subsort Nat < Time .
  *** The values the statuses can take
  ops hOff hFairlyhot hVeryhot : -> HeaterStatus .
  ops whOff whFairlyhot whVeryhot : -> WaterheaterStatus .
  ops open halfopen closed : -> WindowStatus .

  *** The additional attributes of the heater and window
  sorts RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Active .
  subsort Float < EffectTemp .          *** The effect indicates how much the window and heater can decrease and increase the temperature in the room.
  subsort Float < EffectAQ .
  ops yes no : -> RuleAppliedTemp .         *** Indicates if a rule was applied at the current time step.
  ops yes no : -> RuleAppliedAQ .
  ops yes no : -> Active .              *** Indicates if the heater/water heater is currently active or not.

  *** Specification of the components
  op < _ :Heater | Status: _, RuleAppliedTemp: _, RuleAppliedAQ: _, EffectsTemp: _, EffectsAQ: _, Active: _  > : Oid HeaterStatus RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Active -> Heater [format (ntb b b b b b b b b b b b b b b b b b b b b b o)] .
  op < _ :Waterheater | Status: _, RuleAppliedTemp: _, RuleAppliedAQ: _, EffectsTemp: _, EffectsAQ: _, Active: _  > : Oid WaterheaterStatus RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Active -> Waterheater [format (ntb b b b b b b b b b b b b b b b b b b b b b o)] .
  op < _ :Window | Status: _, RuleAppliedTemp: _, RuleAppliedAQ: _, EffectsTemp: _, EffectsAQ: _  > : Oid WindowStatus RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ -> Window [format (ntb b b b b b b b b b b b b b b b b b b o)] .
  op < _ :Thermometer | Degrees: _ > : Oid Temperature -> Thermometer [format (ntb b b b b b b o)] .
  op < _ :Clock | Time: _ > : Oid Time -> Clock [format (ntb b b b b b b o)] .

  vars H WH W T C : Oid .
  var DG : Temperature .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var TI : Time .
  var RAT : RuleAppliedTemp .
  var RAAQ : RuleAppliedAQ .
  vars ET ET1 ET2 : EffectTemp .
  vars EAQ EAQ1 EAQ2 : EffectAQ .

  *** Rules heater
  *** If the heater did not affect the temperature in the room in the current hour yet, then the temperature increases depending on the status of the heater.
  rl [TempHeaterOff] :
    < H :Heater | Status: hOff, RuleAppliedTemp: no, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG >
    =>
    < H :Heater | Status: hOff, RuleAppliedTemp: yes, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG >
    [print "Degrees: " DG ", rule: [TempHeaterOff]"] .

  rl [TempHeaterFairlyhot] :
    < H :Heater | Status: hFairlyhot, RuleAppliedTemp: no, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG >
    =>
    < H :Heater | Status: hFairlyhot, RuleAppliedTemp: yes, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG + ET >
    [print "Degrees: " DG ", rule: [TempHeaterFairlyhot]"] .

  rl [TempHeaterVeryhot] :
    < H :Heater | Status: hVeryhot, RuleAppliedTemp: no, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG >
    =>
    < H :Heater | Status: hVeryhot, RuleAppliedTemp: yes, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG + 2.0 * ET >
    [print "Degrees: " DG ", rule: [TempHeaterVeryhot] "] .

  *** Rules water heater
  *** If the water heater did not affect the temperature in the room in the current hour yet, then the temperature increases depending on the status of the water heater.
  rl [TempWaterheaterOff] :
    < WH :Waterheater | Status: whOff, RuleAppliedTemp: no, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG >
    =>
    < WH :Waterheater | Status: whOff, RuleAppliedTemp: yes, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG >
    [print "Degrees: " DG ", rule: [TempWaterheaterOff]"] .

  rl [TempWaterheaterFairlyhot] :
    < WH :Waterheater | Status: whFairlyhot, RuleAppliedTemp: no, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG >
    =>
    < WH :Waterheater | Status: whFairlyhot, RuleAppliedTemp: yes, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG + ET >
    [print "Degrees: " DG ", rule: [TempWaterheaterFairlyhot]"] .

  rl [TempWaterheaterVeryhot] :
    < WH :Waterheater | Status: whVeryhot, RuleAppliedTemp: no, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG >
    =>
    < WH :Waterheater | Status: whVeryhot, RuleAppliedTemp: yes, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < T :Thermometer | Degrees: DG + 2.0 * ET >
    [print "Degrees: " DG ", rule: [TempWaterheaterVeryhot] "] .

  *** Rules Window
  *** If the window did not affect the temperature in the room in the current hour yet, then the temperature decreases depending on the status of the window.
  rl [TempWindowClosed] :
    < W :Window | Status: closed, RuleAppliedTemp: no, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ > < T :Thermometer | Degrees: DG >
    =>
    < W :Window | Status: closed, RuleAppliedTemp: yes, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ > < T :Thermometer | Degrees: DG >
    [print "Degrees: " DG ", rule: [TempWindowClosed]"] .

  rl [TempWindowHalfopen] :
    < W :Window | Status: halfopen, RuleAppliedTemp: no, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ > < T :Thermometer | Degrees: DG >
    =>
    < W :Window | Status: halfopen, RuleAppliedTemp: yes, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ > < T :Thermometer | Degrees: DG + ET >
    [print "Degrees: " DG "rule [TempWindowHalfopen]"] .

  rl [TempWindowOpen] :
    < W :Window | Status: open, RuleAppliedTemp: no, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ > < T :Thermometer | Degrees: DG >
    =>
    < W :Window | Status: open, RuleAppliedTemp: yes, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ > < T :Thermometer | Degrees: DG + 2.0 * ET >
    [print "Degrees: " DG ", rule: [TempWindowOpen]"] .

  *** Rules time
  *** Case 1: heater is active and waterheater is not active
  *** If both the heater and the window affected the temperature in the current hour, then time goes to the next hour and the flags for the heater and window change (rules can be applied again)
  rl [timeAdvancesH] :
    < H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: no >
    < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2 >
    < C :Clock | Time: TI >
    =>
    < H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: no >
    < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2 >
    < C :Clock | Time: TI + 1 >
    [print "rule: [timeAdvancesH]"] .

  *** Case 2: water heater is active and heater is not active
  rl [timeAdvancesWH] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: no >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
    < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2 >
    < C :Clock | Time: TI >
    =>
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Active: no >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
    < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2 >
    < C :Clock | Time: TI + 1 >
    [print "rule: [timeAdvancesWH]"] .

  *** Case 3: both the water heater and the heater are active
  *** Case 2: water heater is active and heater is not active
  rl [timeAdvancesHWH] :
    < H :Heater | Status: HS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
    < W :Window | Status: WS, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2 >
    < C :Clock | Time: TI >
    =>
    < H :Heater | Status: HS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET1, EffectsAQ: EAQ1, Active: yes >
    < W :Window | Status: WS, RuleAppliedTemp: no, RuleAppliedAQ: no, EffectsTemp: ET2, EffectsAQ: EAQ2 >
    < C :Clock | Time: TI + 1 >
    [print "rule: [timeAdvancesHWH]"] .



endm
eof
