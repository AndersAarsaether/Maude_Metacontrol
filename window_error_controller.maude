mod WINDOWERRCONTROLLER is
  protecting CONTROLLERS .

  vars H W WH T C WEC AQ : Oid .
  var DG : Temperature .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var AQS : AirqualityStatus .
  var TI : Time .
  var TS : Timesteps .
  vars ET ET1 ET2 : EffectTemp .
  vars EAQ EAQ1 EAQ2 : EffectAQ .
  vars RAT RAT1 RAT2 : RuleAppliedTemp .
  vars RAAQ RAAQ1 RAAQ2 : RuleAppliedAQ .
  var B : Broken .



  *** Rules for not in the morning

  *** If T ok -> H off, W closed, WH off
  crl [WinErrContrTempOk] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    =>
    < H :Heater | Status: off, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: off, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: closed, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    if morning?(TI) == false /\ hot?(DG) == false /\ cold?(DG) == false
    [print "rule: [WinErrContrTempOk]"] .

  *** If T low -> H fairly hot, W closed, WH off
  crl [WinErrContrTempLow] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    =>
    < H :Heater | Status: fairlyhot, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: off, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: closed, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    if morning?(TI) == false /\ cold?(DG) == true
    [print "rule: [WinErrContrTempLow]"] .

  *** If T high -> H off, W closed, WH off
  crl [WinErrContrTempHigh] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    =>
    < H :Heater | Status: off, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: off, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: closed, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    if morning?(TI) == false /\ hot?(DG) == true
    [print "rule: [WinErrContrTempHigh]"] .



  *** Rules for the morning

  *** If T ok -> H off, W closed, WH on
  crl [WinErrContrTempOkM] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    =>
    < H :Heater | Status: off, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: on, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: closed, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    if morning?(TI) == true /\ hot?(DG) == false /\ cold?(DG) == false
    [print "rule: [WinErrContrTempOkM]"] .

  *** If T low -> H fairly hot, W closed, WH on
  crl [WinErrContrTempLowM] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    =>
    < H :Heater | Status: fairlyhot, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: on, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: closed, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    if morning?(TI) == true /\ cold?(DG) == true
    [print "rule: [WinErrContrTempLowM]"] .

  *** If T high -> H off, W closed, WH on
  crl [WinErrContrTempHighM] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    =>
    < H :Heater | Status: off, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: on, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B >
    < W :Window | Status: closed, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: yes >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < WEC :WindowErrController | Selected: yes >
    if morning?(TI) == true /\ hot?(DG) == true
    [print "rule: [WinErrContrTempHighM]"] .

endm
