mod SMARTHOME is protecting STRING .

    *** The components of the system
    sorts Oid Heater Waterheater Window Thermometer Airquality Clock Configuration .
    subsorts Heater Waterheater Window Thermometer Airquality Clock < Configuration .
    subsort String < Oid .  *** Object identifier

    op none : -> Configuration [ctor] .
    op __ : Configuration Configuration -> Configuration [ctor comm assoc id: none] .

    *** The statuses of the components
    sorts HeaterStatus WaterheaterStatus WindowStatus ThermometerStatus AirqualityStatus ClockStatus  .

    *** The values the statuses can take
    ops off fairlyhot veryhot : -> HeaterStatus .
    ops on off : -> WaterheaterStatus .
    ops open closed : -> WindowStatus .
    ops low medium high : -> ThermometerStatus .
    ops good bad : -> AirqualityStatus .
    ops earlymorning morningAfternoon evening : -> ClockStatus .

    *** Specification of the components
    op < _ :Heater | Status: _ > : Oid HeaterStatus -> Heater [format (ntr r r r r r r o)] .
    op < _ :Waterheater | Status: _ > : Oid WaterheaterStatus -> Waterheater [format (ntb b b b b b b o)] .
    op < _ :Window | Status: _ > : Oid WindowStatus -> Window [format (ntc c c c c c c o)] .
    op < _ :Thermometer | Status: _ > : Oid ThermometerStatus -> Thermometer [format (nty y y y y y y o)] .
    op < _ :Airquality | Status: _ > : Oid AirqualityStatus -> Airquality [format (ntg g g g g g g o)] .
    op < _ :Clock | Status: _ > : Oid ClockStatus -> Clock [format (ntm m m m m m m o)] .


    vars H WH W T AQ C : Oid .

    var HS : HeaterStatus .
    var WHS : WaterheaterStatus .
    var WS : WindowStatus .
    var TS : ThermometerStatus .
    var AQS : AirqualityStatus .
    var CS : ClockStatus .

    op init : -> Configuration .
    eq  init = < "homeHeater" :Heater | Status: off >
            < "homeWaterHeater" :Waterheater | Status: off >
            < "homeWindow" :Window | Status: closed >
            < "homeThermometer" :Thermometer | Status: low >
            < "homeAirQuality" :Airquality | Status: bad >
            < "homeClock" :Clock | Status: earlymorning > .


    *** If the temperature is low, the waterheater is on and it is not evening (i.e. electricity is expensive), then only turn the heater to fairly hot.
    crl [heaterOffToFairlyhot] :
        < H :Heater | Status: off > < T :Thermometer | Status: low > < WH :Waterheater | Status: on > < C :Clock | Status: CS >
        =>
        < H :Heater | Status: fairlyhot > < T :Thermometer | Status: low > < WH :Waterheater | Status: on > < C :Clock | Status: CS >
        if  CS =/= evening .

    *** If the temperature is low and the waterheater is off, then turn the heater to very hot.
    rl [heaterOffToVeryhot] :
        < H :Heater | Status: HS > < T :Thermometer | Status: low > < WH :Waterheater | Status: off >
        =>
        < H :Heater | Status: veryhot > < T :Thermometer | Status: low > < WH :Waterheater | Status: off > .

    *** If the temperature is low and it is evening (i.e. electricity is not expensive), then turn the heater to very hot.
    rl [heaterOffToVeryhot] :
        < H :Heater | Status: HS > < T :Thermometer | Status: low > < C :Clock | Status: evening >
        =>
        < H :Heater | Status: veryhot > < T :Thermometer | Status: low > < C :Clock | Status: evening > .

    *** If the air quality is bad, then turn the heater off and open the window.
    rl [heaterOffWindowOpen] :
        < H :Heater | Status: HS > < W :Window | Status: WS > < AQ :Airquality | Status: bad >
        =>
        < H :Heater | Status: off > < W :Window | Status: open > < AQ :Airquality | Status: bad > .

    *** If the temperature is high, then put the heater from very hot to fairly hot.
    rl [heaterVeryhotToFairlyhot1] :
        < H :Heater | Status: veryhot > < T :Thermometer | Status: high >
        =>
        < H :Heater | Status: fairlyhot > < T :Thermometer | Status: high > .

    *** If the waterheater is on and it is not evening, then put the heater from very hot to fairly hot.
    crl [heaterVeryhotToFairlyhot2] :
        < H :Heater | Status: veryhot > < WH :Waterheater | Status: on > < C :Clock | Status: CS >
        =>
        < H :Heater | Status: fairlyhot > < WH :Waterheater | Status: on > < C :Clock | Status: CS >
        if CS =/= evening .

    *** If the air quality is good and the window is still open, then close the window,
    rl [closeWindowIfAirqualityGood] :
        < AQ :Airquality | Status: good > < W :Window | Status: open >
        =>
        < AQ :Airquality | Status: good > < W :Window | Status: closed > .

    *** Turn the waterheater on in the early morning
    rl [morningWaterHeating] :
        < C :Clock | Status: earlymorning > < WH :Waterheater | Status: WHS >
        =>
        < C :Clock | Status: earlymorning > < WH :Waterheater | Status: on > .
endm
eof
