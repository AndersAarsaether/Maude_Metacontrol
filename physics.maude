in thermometer.maude
in airquality.maude
in clock.maude
in scheduler.maude

mod PHYSICS is
  protecting THERMOMETER .
  protecting AIRQUALITY .
  protecting CLOCK .
  protecting SCHEDULER .

  sort TempAqGuard TempAqChanged .
  subsort TempAqGuard < Configuration .

  ops yes no : -> TempAqChanged .

  *** Indicates whether rule changing temperature and air quality have been applied
  op < TempAqChanged: _ > : TempAqChanged -> TempAqGuard [format(ntc c c c c)].

  vars H WH W T C AQ : Oid .
  vars DG newDG : Temperature .
  vars AQS newAQS : AirqualityStatus .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  vars ET ET1 ET2 : EffectTemp .
  vars EAQ EAQ1 EAQ2 : EffectAQ .
  vars A A1 A2 : Attribute .
  var CONF : Configuration .
  var TAQC : TempAqChanged .

  op changeTempBy : Configuration -> Float .
  eq changeTempBy(< H :Heater | Status: fairlyhot, EffectTemp: ET, A > CONF) = ET + changeTempBy(CONF) .
  eq changeTempBy(< H :Heater | Status: veryhot, EffectTemp: ET, A > CONF) = (2.0 * ET) + changeTempBy(CONF) .
  eq changeTempBy(< WH :Waterheater | Status: on, EffectTemp: ET, A > CONF) = ET + changeTempBy(CONF) .
  eq changeTempBy(< W :Window | Status: halfopen, EffectTemp: ET, A > CONF) = ET + changeTempBy(CONF) .
  eq changeTempBy(< W :Window | Status: open, EffectTemp: ET, A > CONF) = (2.0 * ET) + changeTempBy(CONF) .
  eq changeTempBy(CONF) = 0.0 [owise] .

  op changeAqBy : Configuration -> Float .
  eq changeAqBy(< H :Heater | Status: fairlyhot, EffectAQ: EAQ, A > CONF) = EAQ + changeAqBy(CONF) .
  eq changeAqBy(< H :Heater | Status: veryhot, EffectAQ: EAQ, A > CONF) = (2.0 * EAQ) + changeAqBy(CONF) .
  eq changeAqBy(< WH :Waterheater | Status: on, EffectAQ: EAQ, A > CONF) = EAQ + changeAqBy(CONF) .
  eq changeAqBy(< W :Window | Status: closed, EffectAQ: EAQ, A > CONF) = -0.125 + changeAqBy(CONF) .
  eq changeAqBy(< W :Window | Status: halfopen, EffectAQ: EAQ, A > CONF) = EAQ + changeAqBy(CONF) .
  eq changeAqBy(< W :Window | Status: open, EffectAQ: EAQ, A > CONF) = (2.0 * EAQ) + changeAqBy(CONF) .
  eq changeAqBy(CONF) = 0.0 [owise] .


  *** Rule for changing temperature and air quality in the room depending on the statuses of the actuators
  crl [changeTempAq] :
    {< T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < TempAqChanged: no >
    < Scheduler: PhysicsChange > CONF}
    =>
    {< T :Thermometer | Degrees: newDG >
    < AQ :Airquality | Value: newAQS >
    < TempAqChanged: yes >
    < Scheduler: PhysicsChange > CONF}
    if newDG := DG + changeTempBy(CONF) /\ newAQS := AQS + changeAqBy(CONF)
    [print "rule: [changeTempAq], Change Temp from " DG " to " newDG " and AQ from " AQS " to " newAQS] .



endm
