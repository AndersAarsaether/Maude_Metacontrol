mod AIRQUALITY is
  protecting ACTUATORS .

  sort Airquality .
  subsort Airquality < Configuration .

  sort AirqualityStatus .
  subsort Float < AirqualityStatus .        *** 0 Airquality is normal, airquality >0 is good, airquality < 0 is bad

  op < _ :Airquality | Value: _ > : Oid AirqualityStatus -> Airquality [format (ntb b b b b b b o)] .

  var AQ : Oid .
  vars AQS newAQS : AirqualityStatus .
  var CON : Configuration .
  vars H WH W : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  vars EAQ : EffectAQ .
  vars A A1 A2 : Attribute .


  op aqok? : AirqualityStatus -> Bool .
  ceq aqok?(AQS) = true if AQS >= 0.0 .
  ceq aqok?(AQS) = false if AQS < 0.0 .

  op getAirquality : Configuration -> AirqualityStatus .
  eq getAirquality(< AQ :Airquality | Value: AQS > CON) = AQS .



  **** Rules heater
  *** If the heater did not affect the air quality in the room in the current hour yet, then the air quality decreases depending on the status of the heater.
  crl [AQHeaterOff] :
    < H :Heater | Status: hOff, RuleAppliedAQ: no, A >
    < WH :Waterheater | Status: WHS, A1 >
    < W :Window | Status: WS, A2 >
    < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: hOff, RuleAppliedAQ: yes, A >
    < WH :Waterheater | Status: WHS, A1 >
    < W :Window | Status: WS, A2 >
    < AQ :Airquality | Value: AQS >
    if not (WHS == whOff and WS == closed)
    [print "rule: [AQHeaterOff], Air quality before: " AQS ", Air quality after: " AQS] .

  crl [AQHeaterFairlyhot] :
    < H :Heater | Status: fairlyhot, RuleAppliedAQ: no, EffectAQ: EAQ, A >
    < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: fairlyhot, RuleAppliedAQ: yes, EffectAQ: EAQ, A >
    < AQ :Airquality | Value: newAQS >
    if newAQS := AQS + EAQ
    [print "rule: [AQHeaterFairlyhot], Air quality before: " AQS ", Air quality after: " newAQS] .

  crl [AQHeaterVeryhot] :
    < H :Heater | Status: veryhot, RuleAppliedAQ: no, EffectAQ: EAQ, A >
    < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: veryhot, RuleAppliedAQ: yes, EffectAQ: EAQ, A >
    < AQ :Airquality | Value: newAQS >
    if newAQS := AQS + 2.0 * EAQ
    [print "rule: [AQHeaterVeryhot], Air quality before: " AQS ", Air quality after: " newAQS] .

  **** Rules water heater
  *** If the water heater did not affect the air quality in the room in the current hour yet, then the air quality decreases depending on the status of the water heater.
  crl [AQWaterheaterOff] :
    < H :Heater | Status: HS, A >
    < WH :Waterheater | Status: whOff, RuleAppliedAQ: no, A1 >
    < W :Window | Status: WS, A2 >
    < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: HS, A >
    < WH :Waterheater | Status: whOff, RuleAppliedAQ: yes, A1 >
    < W :Window | Status: WS, A2 >
    < AQ :Airquality | Value: AQS >
    if not (HS == hOff and WS == closed)
    [print "rule: [AQWaterheaterOff], Air quality before: " AQS ", Air quality after: " AQS] .

  crl [AQWaterheaterOn] :
    < WH :Waterheater | Status: on, RuleAppliedAQ: no, EffectAQ: EAQ, A >
    < AQ :Airquality | Value: AQS >
    =>
    < WH :Waterheater | Status: on, RuleAppliedAQ: yes, EffectAQ: EAQ, A >
    < AQ :Airquality | Value: newAQS >
    if newAQS := AQS + EAQ
    [print "rule: [AQWaterheaterOn], Air quality before: " AQS ", Air quality after: " newAQS] .

  **** Rules window
  *** If the window did not affect the air quality in the room in the current hour yet, then the air quality increases depending on the status of the window.
  crl [AQWindowClosed] :
    < H :Heater | Status: HS, A >
    < WH :Waterheater | Status: WHS, A1 >
    < W :Window | Status: closed, RuleAppliedAQ: no, A2 >
    < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: HS, A >
    < WH :Waterheater | Status: WHS, A1 >
    < W :Window | Status: closed, RuleAppliedAQ: yes, A2 >
    < AQ :Airquality | Value: AQS >
    if not (HS == hOff and WHS == whOff)
    [print "rule: [AQWindowClosed], Air quality before: " AQS ", Air quality after: " AQS] .

  crl [AQWindowHalfopen] :
    < W :Window | Status: halfopen, RuleAppliedAQ: no, EffectAQ: EAQ, A >
    < AQ :Airquality | Value: AQS >
    =>
    < W :Window | Status: halfopen, RuleAppliedAQ: yes, EffectAQ: EAQ, A >
    < AQ :Airquality | Value: newAQS >
    if newAQS := AQS + EAQ
    [print "rule: [AQWindowHalfopen], Air quality before: " AQS ", Air quality after: " newAQS] .

  crl [AQWindowOpen] :
    < W :Window | Status: open, RuleAppliedAQ: no, EffectAQ: EAQ, A >
    < AQ :Airquality | Value: AQS >
    =>
    < W :Window | Status: open, RuleAppliedAQ: yes, EffectAQ: EAQ, A >
    < AQ :Airquality | Value: AQS + 2.0 * EAQ >
    if newAQS := AQS + 2.0 * EAQ
    [print "rule: [AQWindowOpen], Air quality before: " AQS ", Air quality after: " newAQS] .


  **** Rule all off
  *** If heater and water heater are off and the window is closed, then the air quality decreases a bit
  crl [AQAllOff] :
    < H :Heater | Status: hOff, RuleAppliedAQ: no, EffectAQ: EAQ, A >
    < WH :Waterheater | Status: whOff, RuleAppliedAQ: no, A1 >
    < W :Window | Status: closed, RuleAppliedAQ: no, A2 >
    < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: hOff, RuleAppliedAQ: yes, EffectAQ: EAQ, A >
    < WH :Waterheater | Status: whOff, RuleAppliedAQ: yes, A1 >
    < W :Window | Status: closed, RuleAppliedAQ: yes, A2 >
    < AQ :Airquality | Value: newAQS >
    if newAQS := AQS - 0.25
    [print "rule: [AQAllOff], Air quality before: " AQS ", Air quality after: " newAQS] .

endm
