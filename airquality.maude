mod AIRQUALITY is
  protecting ACTUATORS .

  sort Airquality .
  subsort Airquality < Configuration .

  sort AirqualityStatus .
  subsort Float < AirqualityStatus .        *** 0 Airquality is normal, airquality >0 is good, airquality < 0 is bad

  op < _ :Airquality | Value: _ > : Oid AirqualityStatus -> Airquality [format (ntb b b b b b b o)] .

  op aqok? : AirqualityStatus -> Bool .
  op getAirquality : Configuration -> AirqualityStatus .

  var AQ : Oid .
  var AQS : AirqualityStatus .
  var CON : Configuration .

  ceq aqok?(AQS) = true if AQS >= 0.0 .
  ceq aqok?(AQS) = false if AQS < 0.0 .

  eq getAirquality(< AQ :Airquality | Value: AQS > CON) = AQS .

  vars H WH W : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  vars RAT RAT1 RAT2 : RuleAppliedTemp .
  vars RAAQ RAAQ1 RAAQ2 : RuleAppliedAQ .
  vars ET ET1 ET2 : EffectTemp .
  vars EAQ EAQ1 EAQ2 : EffectAQ .
  vars B B1 B2 : Broken .

  *** Rules heater
  *** If the heater did not affect the air quality in the room in the current hour yet, then the air quality decreases depending on the status of the heater.
  rl [AQHeaterFairlyhot] :
    < H :Heater | Status: fairlyhot, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: fairlyhot, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > < AQ :Airquality | Value: AQS + EAQ >
    [print "Air quality: " AQS ", rule: [AQHeaterFairlyhot]"] .

  rl [AQHeaterVeryhot] :
    < H :Heater | Status: veryhot, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: veryhot, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > < AQ :Airquality | Value: AQS + 2.0 * EAQ >
    [print "Air quality: " AQS ", rule: [AQHeaterVeryhot]"] .

  *** Rules water heater
  *** If the water heater did not affect the air quality in the room in the current hour yet, then the air quality decreases depending on the status of the water heater.
  rl [AQWaterheaterOn] :
    < WH :Waterheater | Status: on, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > < AQ :Airquality | Value: AQS >
    =>
    < WH :Waterheater | Status: on, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > < AQ :Airquality | Value: AQS + 2.0 * EAQ >
    [print "Air quality: " AQS ", rule: [AQWaterheaterOn]"] .

  *** Rules Window
  *** If the window did not affect the air quality in the room in the current hour yet, then the air quality increases depending on the status of the window.
  rl [AQWindowHalfopen] :
    < W :Window | Status: halfopen, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > < AQ :Airquality | Value: AQS >
    =>
    < W :Window | Status: halfopen, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > < AQ :Airquality | Value: AQS + EAQ >
    [print "Air quality: " AQS "rule: [AQWindowHalfopen]"] .

  rl [AQWindowOpen] :
    < W :Window | Status: open, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > < AQ :Airquality | Value: AQS >
    =>
    < W :Window | Status: open, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > < AQ :Airquality | Value: AQS + 2.0 * EAQ >
    [print "Air quality: " AQS ", rule: [AQWindowOpen]"] .

  *** If heater and water heater are off and the window is closed, then the air quality decreases a bit
  rl [AQAllOff] :
    < H :Heater | Status: hOff, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: whOff, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B1 >
    < W :Window | Status: closed, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: B2 >
    < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: hOff, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
    < WH :Waterheater | Status: whOff, RuleAppliedTemp: RAT1, RuleAppliedAQ: yes, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: B1 >
    < W :Window | Status: closed, RuleAppliedTemp: RAT2, RuleAppliedAQ: yes, EffectsTemp: ET2, EffectsAQ: EAQ2, Broken: B2 >
    < AQ :Airquality | Value: AQS - 0.25 >
    [print "Air quality: " AQS ", rule: [AQAllOff]"] .

endm
