mod AIRQUALITY is
  protecting PHYSICS .

  sort Airquality .
  subsort Airquality < Configuration .

  sort AirqualityStatus .
  subsort Float < AirqualityStatus .        *** 0 Airquality is normal, airquality >0 is bad, airquality < 0 is good

  op < _ :Airquality | Value: _ > : Oid AirqualityStatus -> Airquality [format (ntb b b b b b b o)] .

  vars H WH W AQ : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var RAT : RuleAppliedTemp .
  var ET : EffectTemp .
  var EAQ : EffectAQ .
  var AQS : AirqualityStatus .

  *** Rules heater
  *** If the heater did not affect the air quality in the room in the current hour yet, then the air quality decreases depending on the status of the heater.
  rl [AQHeaterOff] :
    < H :Heater | Status: hOff, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: hOff, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS >
    [print "Air quality: " AQS ", rule: [AQHeaterOff]"] .

  rl [AQHeaterFairlyhot] :
    < H :Heater | Status: hFairlyhot, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: hFairlyhot, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS + EAQ >
    [print "Air quality: " AQS ", rule: [AQHeaterFairlyhot]"] .

  rl [AQHeaterVeryhot] :
    < H :Heater | Status: hVeryhot, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS >
    =>
    < H :Heater | Status: hVeryhot, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS + 2.0 * EAQ >
    [print "Air quality: " AQS ", rule: [AQHeaterVeryhot] "] .

  *** Rules water heater
  *** If the water heater did not affect the air quality in the room in the current hour yet, then the air quality decreases depending on the status of the water heater.
  rl [AQWaterheaterOff] :
    < WH :Waterheater | Status: whOff, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS >
    =>
    < WH :Waterheater | Status: whOff, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS >
    [print "Air quality: " AQS ", rule: [AQWaterheaterOff]"] .

  rl [AQWaterheaterFairlyhot] :
    < WH :Waterheater | Status: whFairlyhot, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS >
    =>
    < WH :Waterheater | Status: whFairlyhot, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS + EAQ >
    [print "Air quality: " AQS ", rule: [AQWaterheaterFairlyhot]"] .

  rl [AQWaterheaterVeryhot] :
    < WH :Waterheater | Status: whVeryhot, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS >
    =>
    < WH :Waterheater | Status: whVeryhot, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ, Active: yes > < AQ :Airquality | Value: AQS + 2.0 * EAQ >
    [print "Air quality: " AQS ", rule: [AQWaterheaterVeryhot] "] .

  *** Rules Window
  *** If the window did not affect the air quality in the room in the current hour yet, then the air quality increases depending on the status of the window.
  rl [AQWindowClosed] :
    < W :Window | Status: closed, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ > < AQ :Airquality | Value: AQS >
    =>
    < W :Window | Status: closed, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ > < AQ :Airquality | Value: AQS >
    [print "Air quality: " AQS ", rule: [AQWindowClosed]"] .

  rl [AQWindowHalfopen] :
    < W :Window | Status: halfopen, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ > < AQ :Airquality | Value: AQS >
    =>
    < W :Window | Status: halfopen, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ > < AQ :Airquality | Value: AQS + EAQ >
    [print "Air quality: " AQS "rule: [AQWindowHalfopen]"] .

  rl [AQWindowOpen] :
    < W :Window | Status: open, RuleAppliedTemp: RAT, RuleAppliedAQ: no, EffectsTemp: ET, EffectsAQ: EAQ > < AQ :Airquality | Value: AQS >
    =>
    < W :Window | Status: open, RuleAppliedTemp: RAT, RuleAppliedAQ: yes, EffectsTemp: ET, EffectsAQ: EAQ > < AQ :Airquality | Value: AQS + 2.0 * EAQ >
    [print "Air quality: " AQS ", rule: [AQWindowOpen]"] .

endm
