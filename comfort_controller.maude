in controllers_smart_home.maude

mod COMFORTCONTROLLER is
  protecting CONTROLLERS .

  vars H W WH T C CC AQ : Oid .
  var DG : Temperature .
  var WS : WindowStatus .
  var AQS : AirqualityStatus .
  var TI : Time .
  var TS : Timesteps .
  vars A A1 A2 : Attribute .
  vars B B1 B2 : Bool .
  vars TL AL : TVPList .

  *** Not in the morning
  *** If T ok, AQ ok -> H off, WH off, W closed
  crl [CContrTempOkAqOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg hOff from CC to H)
    (msg whOff from CC to WH)
    (msg closed from CC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if morning(TI) == false /\ hot(DG) == false /\ cold(DG) == false /\ aqok(AQS) == true
    [print "rule: [CContrTempOkAqOk]"] .

  *** If T ok, AQ not ok, W not open -> H veryhot, WH off, W half open
  crl [CContrTempOkAqNotOk1] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg veryhot from CC to H)
    (msg whOff from CC to WH)
    (msg halfopen from CC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if morning(TI) == false /\ hot(DG) == false /\ cold(DG) == false /\ aqok(AQS) == false /\ WS =/= open
    [print "rule: [CContrTempOkAqNotOk1]"] .

  *** If T ok, AQ not ok, W open -> H veryhot, WH off, W open
  crl [CContrTempOkAqNotOk2] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg veryhot from CC to H)
    (msg whOff from CC to WH)
    (msg open from CC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if morning(TI) == false /\ hot(DG) == false /\ cold(DG) == false /\ aqok(AQS) == false /\ WS == open
    [print "rule: [CContrTempOkAqNotOk2]"] .

  *** If T low -> H veryhot, WH on, W closed
  crl [CContrTempLow] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg veryhot from CC to H)
    (msg on from CC to WH)
    (msg closed from CC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if morning(TI) == false /\ cold(DG) == true
    [print "rule: [CContrTempLow]"] .

  *** If T high -> H off, WH off, W open
  crl [CContrTempHigh] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg hOff from CC to H)
    (msg whOff from CC to WH)
    (msg open from CC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if morning(TI) == false /\ hot(DG) == true
    [print "rule: [CContrTempHigh]"] .




  *** In the morning
  *** If T ok, AQ ok -> H off, W closed, WH on
  crl [CContrTempOkAqOkM] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg hOff from CC to H)
    (msg on from CC to WH)
    (msg closed from CC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if morning(TI) == true /\ hot(DG) == false /\ cold(DG) == false /\ aqok(AQS) == true
    [print "rule: [CContrTempOkAqOkM]"] .

  *** It T ok, AQ not OK & W not open ->  H fairlyhot, W half open, WH on
  crl [CContrTempOkAqNotOkM1] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg fairlyhot from CC to H)
    (msg on from CC to WH)
    (msg halfopen from CC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if morning(TI) == true /\ hot(DG) == false /\ cold(DG) == false /\ aqok(AQS) == false /\ WS =/= open
    [print "rule: [CContrTempOkAqNotOkM1]"] .

  *** It T ok, AQ not OK & W open ->  H veryhot, W open, WH on
  crl [CContrTempOkAqNotOkM2] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg veryhot from CC to H)
    (msg on from CC to WH)
    (msg open from CC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if morning(TI) == true /\ hot(DG) == false /\ cold(DG) == false /\ aqok(AQS) == false /\ WS == open
    [print "rule: [CContrTempOkAqNotOkM2]"] .

  *** If T low -> H fairly hot, W closed, WH on
  crl [CContrTempLowM] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg fairlyhot from CC to H)
    (msg on from CC to WH)
    (msg closed from CC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if morning(TI) == true /\ cold(DG) == true
    [print "rule: [CContrTempLowM]"] .

  *** If T high -> H off, W open, WH on
  crl [CContrTempHighM] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: false >
    =>
    (msg hOff from CC to H)
    (msg on from CC to WH)
    (msg open from CC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < CC :ComfortController | Selected: true >
    < Scheduler | Status: ContrChange, RuleApplied: true >
    if morning(TI) == true /\ hot(DG) == true
    [print "rule: [CContrTempHighM]"] .

endm
eof
