const templog = `
(0,200) (0,195) (0,190) (0,200) (0,195) (0,190) (0,202) (0,202) (0,202) (0,198) (0,198) (0,198) (0,201) (0,200) (0,200) (0,200) (0,200) (0,200) (0,197) (0,   
  194) (0,191) (0,190) (0,202) (0,201) (0,196) (0,191) (0,186) (0,196) (0,193) (0,188) (0,200) (0,196) (0,196) (0,196) (0,192) (0,192) (0,195) (0,198) (0,200) (0,200) (0,   
  200) (0,200) (0,197) (0,194) (0,191) (0,190) (0,202) (0,201) (0,196) (0,191) (0,186) (0,196) (0,193) (0,188) (0,200) (0,196) (0,196) (0,196) (0,192) (0,192) (0,195) (0,   
  198) (0,200) (0,200) (0,200) (0,200) (0,197) (0,194) (0,191) (0,190) (0,202) (0,201) (0,196) (0,191) (0,186) (0,196) (0,193) (0,188) (0,200) (0,196) (0,196) (0,196) (0,   
  192) (0,192) (0,195) (0,198) (0,200) (0,200) (0,200) (0,200) (0,197) (0,194) (0,191) (0,190) (0,202) (0,201) (0,196) (0,191) (0,186) (0,196) (0,193) (0,188) (0,200) (0,   
  196) (0,196) (0,196) (0,192) (0,192) (0,195) (0,198) (0,200) (0,200) (0,200) (0,200) (0,197) (0,194) (0,191) (0,190) (0,202) (0,201) (0,196) (0,191) (0,186) (0,196) (0,   
  193) (0,188) (0,200) (0,196) (0,196) (0,196) (0,192) (0,192) (0,195) (0,198) (0,200) (0,200) (0,200) (0,200) (0,197) (0,194) (0,191) (0,190) (0,202) (0,201) (0,196) (0,   
  191) (0,186) (0,196) (0,193) (0,188) (0,200) (0,196) (0,196) (0,196) (0,192) (0,192) (0,195) (0,198) (0,200) (0,200) (0,200) (0,200) (0,197) (0,194) (0,191) (0,190) (0,   
  202) (0,201) (0,196) (0,191) (0,186) (0,196) (0,193) (0,188) (0,200) (0,196) (0,196) (0,196) (0,192) (0,192) (0,195) (0,198) (0,200) (0,200) (0,200) (0,200) (0,197) (0,   
  194) (0,191) (0,190) (0,202) (0,201) (0,196) (0,191) (0,186) (0,196) (0,193) (0,188) (0,200) (0,196)
`

const aqlog = `
(0,19) (0,18) (0,17) (0,11) (0,10) (0,9) (0,3) (0,1) (0,-1) (0,6) (0,4) (0,2) (0,0) (0,7) (0,6) (0,5) (0,4) (0,3) (0,2) (0,1) (0,0) (0,6) (0,0) (0,6) (0,5) (0, 
  4) (0,3) (0,-3) (0,3) (0,2) (0,-4) (0,3) (0,1) (0,-1) (0,6) (0,4) (0,2) (0,0) (0,6) (0,5) (0,4) (0,3) (0,2) (0,1) (0,0) (0,6) (0,0) (0,6) (0,5) (0,4) (0,3) (0,-3) (0,3) ( 
  0,2) (0,-4) (0,3) (0,1) (0,-1) (0,6) (0,4) (0,2) (0,0) (0,6) (0,5) (0,4) (0,3) (0,2) (0,1) (0,0) (0,6) (0,0) (0,6) (0,5) (0,4) (0,3) (0,-3) (0,3) (0,2) (0,-4) (0,3) (0,1) 
  (0,-1) (0,6) (0,4) (0,2) (0,0) (0,6) (0,5) (0,4) (0,3) (0,2) (0,1) (0,0) (0,6) (0,0) (0,6) (0,5) (0,4) (0,3) (0,-3) (0,3) (0,2) (0,-4) (0,3) (0,1) (0,-1) (0,6) (0,4) (0,  
  2) (0,0) (0,6) (0,5) (0,4) (0,3) (0,2) (0,1) (0,0) (0,6) (0,0) (0,6) (0,5) (0,4) (0,3) (0,-3) (0,3) (0,2) (0,-4) (0,3) (0,1) (0,-1) (0,6) (0,4) (0,2) (0,0) (0,6) (0,5) (  
  0,4) (0,3) (0,2) (0,1) (0,0) (0,6) (0,0) (0,6) (0,5) (0,4) (0,3) (0,-3) (0,3) (0,2) (0,-4) (0,3) (0,1) (0,-1) (0,6) (0,4) (0,2) (0,0) (0,6) (0,5) (0,4) (0,3) (0,2) (0,1)  
  (0,0) (0,6) (0,0) (0,6) (0,5) (0,4) (0,3) (0,-3) (0,3) (0,2) (0,-4) (0,3) (0,1) (0,-1) (0,6) (0,4) (0,2) (0,0) (0,6) (0,5) (0,4) (0,3) (0,2) (0,1) (0,0) (0,6) (0,0) (0,6) 
  (0,5) (0,4) (0,3) (0,-3) (0,3) (0,2) (0,-4) (0,3)
`

const TEMP_MIN = 190
const TEMP_MAX = 215
const AQ_MIN = 7

function parseLog(str: string) {
  return str
    .split("(")
    .map(str => {
      const first = str.substring(2)
      const mid = first.substring(0, first.length - 1)
      return parseInt(mid)
    })
    .filter(n => n > -1_000_000)
}

const temps = parseLog(templog)
const aqs = parseLog(aqlog)

const tempErrors = temps.reduce((sum, tmp) => tmp < TEMP_MIN || tmp > TEMP_MAX ? sum + 1 : sum, 0)
const aqErrors = aqs.reduce((sum, aq) => aq < AQ_MIN ? sum + 1 : sum, 0)

const controllerName = Deno.args[0]
if (controllerName) console.log("=== ", controllerName, " ===")

console.log("Temeprature errors:", tempErrors)
console.log("Air Quality errors: ", aqErrors)
console.log("Total errors: ", tempErrors + aqErrors)