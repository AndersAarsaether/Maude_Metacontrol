mod ACTUATORS is
  protecting STRING .
  protecting FLOAT .

  *********************** Actuator definition
  sorts Oid Heater Waterheater Window Actuator Configuration .
  subsorts Heater Window Waterheater < Actuator .
  subsort Actuator < Configuration .
  subsort String < Oid .  *** Object identifier

  op none : -> Configuration [ctor] .
  op __ : Configuration Configuration -> Configuration [ctor comm assoc id: none] .

  *** The statuses of the components
  sorts HeaterStatus WaterheaterStatus WindowStatus ActuatorStatus .
  subsorts HeaterStatus WaterheaterStatus WindowStatus < ActuatorStatus .

  *** The values the statuses can take
  ops hOff fairlyhot veryhot : -> HeaterStatus .
  ops whOff on : -> WaterheaterStatus .
  ops open halfopen closed : -> WindowStatus .

  *** The additional attributes of the heater and window
  sorts RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Broken .
  subsort Float < EffectTemp .              *** The effect indicates how much the actuator can decrease and increase the temperature in the room.
  subsort Float < EffectAQ .                *** The effect indicates how much the actuator can decrease and increase the air quality in the room.
  ops yes no : -> RuleAppliedTemp .         *** Indicates whether a temperature rule was applied at the current time step.
  ops yes no : -> RuleAppliedAQ .           *** Indicates whether an air quality rule was applied at the current time step
  ops yes no : -> Broken .                  *** Indicates whether the actuator is broken or not.


  *** Attribute sort to reduce clutter and only consider the attributes that are important for a rule
  sort Attribute .
  op none : -> Attribute [ctor] .
  op Status: _ : ActuatorStatus -> Attribute [ctor] .
  op RuleAppliedTemp: _ : RuleAppliedTemp -> Attribute [ctor] .
  op RuleAppliedAQ: _ : RuleAppliedAQ -> Attribute [ctor] .
  op EffectTemp: _ : EffectTemp -> Attribute [ctor] .
  op EffectAQ: _ : EffectAQ -> Attribute [ctor] .
  op Broken: _ : Broken -> Attribute [ctor] .
  op _, _ : Attribute Attribute -> Attribute [ctor comm assoc id: none] .

  *** Every actuator needs to have all attributes
  *** TODO Ensure that every actuator has all attributes
  op < _ :Heater | _ > : Oid Attribute -> Heater [format(ntb b b b b b b)] .
  op < _ :Waterheater | _ > : Oid Attribute -> Waterheater [format(ntb b b b b b b)] .
  op < _ :Window | _ > : Oid Attribute -> Window [format(ntb b b b b b b)] .


  vars H WH W C : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var AS : ActuatorStatus .
  var RA : RuleAppliedTemp .
  var RAAQ : RuleAppliedAQ .
  var ET : EffectTemp .
  var EAQ : EffectAQ .
  var B : Broken .
  var A : Attribute .
  var CONF : Configuration .



  ************************ Helpful functions
  *** Get status of actuator
  op getStatus : Actuator -> ActuatorStatus .
  eq getStatus(< H :Heater | Status: HS, A >) = HS .
  eq getStatus(< WH :Waterheater | Status: WHS, A >) = WHS .
  eq getStatus(< W :Window | Status: WS, A >) = WS .

  *** Set status of actuator (if wrong type of actuator status is inserted, nothing happens)
  op setStatus : Actuator ActuatorStatus -> Actuator .
  ceq setStatus(< H :Heater | Status: HS, A >, AS)
      = < H :Heater | Status: AS, A >
      if AS : HeaterStatus .
  ceq setStatus(< WH :Waterheater | Status: WHS, A >, AS)
      = < WH :Waterheater | Status: AS, A >
      if AS : WaterheaterStatus .
  ceq setStatus(< W :Window | Status: WS, A >, AS)
      = < W :Window | Status: AS, A >
      if AS : WindowStatus .

  *** Function to determin whether all actuators applied the rules to change temperature and air quality
  op actuatorsReady : Configuration -> Bool .
  eq actuatorsReady(< H :Heater | RuleAppliedTemp: no, RuleAppliedAQ: no, A > CONF) = false .
  eq actuatorsReady(< H :Heater | RuleAppliedTemp: no, RuleAppliedAQ: yes, A > CONF) = false .
  eq actuatorsReady(< H :Heater | RuleAppliedTemp: yes, RuleAppliedAQ: no, A > CONF) = false .
  eq actuatorsReady(< WH :Waterheater | RuleAppliedTemp: no, RuleAppliedAQ: no, A > CONF) = false .
  eq actuatorsReady(< WH :Waterheater | RuleAppliedTemp: no, RuleAppliedAQ: yes, A > CONF) = false .
  eq actuatorsReady(< WH :Waterheater | RuleAppliedTemp: yes, RuleAppliedAQ: no, A > CONF) = false .
  eq actuatorsReady(< W :Window | RuleAppliedTemp: no, RuleAppliedAQ: no, A > CONF) = false .
  eq actuatorsReady(< W :Window | RuleAppliedTemp: no, RuleAppliedAQ: yes, A > CONF) = false .
  eq actuatorsReady(< W :Window | RuleAppliedTemp: yes, RuleAppliedAQ: no, A > CONF) = false .
  eq actuatorsReady(CONF) = true [owise] .


  ************************* Messages
  sorts Msg .
  subsorts Msg < Configuration .

  *** Send messages
  op msg_from_to_ : ActuatorStatus Oid Oid -> Msg [format(ntg g g g g g g)] .

  *** Receive messages
  *** If actuator is not broken, set status. If actuator is broken, ignore message.
  ceq < H :Heater | Status: HS, Broken: B, A > (msg AS from C to H)
      = setStatus(< H :Heater | Status: HS, Broken: B, A >, AS)
      if B == no .
  ceq < H :Heater | Status: HS, Broken: B, A > (msg AS from C to H)
      = < H :Heater | Status: HS, Broken: B, A >
      if B == yes .
  ceq < WH :Waterheater | Status: WHS, Broken: B, A > (msg AS from C to WH)
      = setStatus(< WH :Waterheater | Status: WHS, Broken: B, A >, AS)
      if B == no .
  ceq < WH :Waterheater | Status: WHS, Broken: B, A > (msg AS from C to WH)
      = < WH :Waterheater | Status: WHS, Broken: B, A >
      if B == yes .
  ceq < W :Window | Status: WS, Broken: B, A > (msg AS from C to W)
      = setStatus(< W :Window | Status: WS, Broken: B, A >, AS)
      if B == no .
  ceq < W :Window | Status: WS, Broken: B, A > (msg AS from C to W)
      = < W :Window | Status: WS, Broken: B, A >
      if B == yes .



endm
eof

*** Specification of the components
op < _ :Heater | Status: _, RuleAppliedTemp: _, RuleAppliedAQ: _, EffectTemp: _, EffectAQ: _, Broken: _ > : Oid HeaterStatus RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Broken -> Heater [format (ntb b b b b b b b b b b b b b b b b b b b b b o)] .
op < _ :Waterheater | Status: _, RuleAppliedTemp: _, RuleAppliedAQ: _, EffectTemp: _, EffectAQ: _, Broken: _ > : Oid WaterheaterStatus RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Broken -> Waterheater [format (ntb b b b b b b b b b b b b b b b b b b b b b o)] .
op < _ :Window | Status: _, RuleAppliedTemp: _, RuleAppliedAQ: _, EffectTemp: _, EffectAQ: _, Broken: _ > : Oid WindowStatus RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Broken -> Window [format (ntb b b b b b b b b b b b b b b b b b b b b b o)] .
