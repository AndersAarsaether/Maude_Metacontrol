fmod ACTUATORS is
  protecting STRING .
  protecting FLOAT .

  *** Actuator definition
  sorts Oid Heater Waterheater Window Actuator Configuration .
  subsorts Heater Window Waterheater < Actuator .
  subsort Actuator < Configuration .
  subsort String < Oid .  *** Object identifier

  *** Configuration is multiset
  op none : -> Configuration [ctor] .
  op __ : Configuration Configuration -> Configuration [ctor comm assoc id: none] .

  *** The statuses of the actuators
  sorts HeaterStatus WaterheaterStatus WindowStatus ActuatorStatus .
  subsorts HeaterStatus WaterheaterStatus WindowStatus < ActuatorStatus .

  *** The values the statuses can take
  ops hOff fairlyhot veryhot : -> HeaterStatus .
  ops whOff on : -> WaterheaterStatus .
  ops open halfopen closed : -> WindowStatus .

  *** The additional attributes of the heaters and window
  sorts EffectTemp EffectAQ Broken .
  subsort Float < EffectTemp .              *** The effect indicates how much the actuator can decrease and increase the temperature in the room.
  subsort Float < EffectAQ .                *** The effect indicates how much the actuator can decrease and increase the air quality in the room.
  ops yes no : -> Broken .                  *** Indicates whether the actuator is broken or not.


  *** Attribute sort to improve readability of rules (only explicitly specify what is needed for the rule)
  sort Attribute .
  op none : -> Attribute [ctor] .
  op Status: _ : ActuatorStatus -> Attribute [ctor] .
  op EffectTemp: _ : EffectTemp -> Attribute [ctor] .
  op EffectAQ: _ : EffectAQ -> Attribute [ctor] .
  op Broken: _ : Broken -> Attribute [ctor] .
  op _, _ : Attribute Attribute -> Attribute [ctor comm assoc id: none] .

  *** Every actuator needs to have all attributes
  op < _ :Heater | _ > : Oid Attribute -> Heater [format(ntb b b b b b b)] .
  op < _ :Waterheater | _ > : Oid Attribute -> Waterheater [format(ntb b b b b b b)] .
  op < _ :Window | _ > : Oid Attribute -> Window [format(ntb b b b b b b)] .

  vars H WH W C : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var AS : ActuatorStatus .
  var B : Broken .
  var A : Attribute .
  var CONF : Configuration .

  *** Set status of actuator (if wrong type of actuator status is inserted, nothing happens)
  op setStatus : Actuator ActuatorStatus -> Actuator .
  ceq setStatus(< H :Heater | Status: HS, A >, AS)
      = < H :Heater | Status: AS, A >
      if AS : HeaterStatus .
  ceq setStatus(< WH :Waterheater | Status: WHS, A >, AS)
      = < WH :Waterheater | Status: AS, A >
      if AS : WaterheaterStatus .
  ceq setStatus(< W :Window | Status: WS, A >, AS)
      = < W :Window | Status: AS, A >
      if AS : WindowStatus .

  *** Find out whether an actuator is broken
  op heaterBroken : Configuration -> Bool .
  eq heaterBroken(< H :Heater | Broken: yes, A > CONF) = true .
  eq heaterBroken(CONF) = false [owise] .

  op waterheaterBroken : Configuration -> Bool .
  eq waterheaterBroken(< WH :Waterheater | Broken: yes, A > CONF) = true .
  eq waterheaterBroken(CONF) = false [owise] .

  op windowBroken : Configuration -> Bool .
  eq windowBroken(< W :Window | Broken: yes, A > CONF) = true .
  eq windowBroken(CONF) = false [owise] .

  op oneBroken : Configuration -> Bool .
  eq oneBroken(CONF) = heaterBroken(CONF) or waterheaterBroken(CONF) or windowBroken(CONF) .

  ************************* Messages
  sorts Msg .
  subsorts Msg < Configuration .

  *** Send messages
  op msg_from_to_ : ActuatorStatus Oid Oid -> Msg [format(ntg g g g g g g)] .

  *** Receive messages
  *** If actuator is not broken, set status. If actuator is broken, ignore message.
  ceq < H :Heater | Status: HS, Broken: B, A > (msg AS from C to H)
      = setStatus(< H :Heater | Status: HS, Broken: B, A >, AS)
      if B == no .
  ceq < H :Heater | Status: HS, Broken: B, A > (msg AS from C to H)
      = < H :Heater | Status: HS, Broken: B, A >
      if B == yes .
  ceq < WH :Waterheater | Status: WHS, Broken: B, A > (msg AS from C to WH)
      = setStatus(< WH :Waterheater | Status: WHS, Broken: B, A >, AS)
      if B == no .
  ceq < WH :Waterheater | Status: WHS, Broken: B, A > (msg AS from C to WH)
      = < WH :Waterheater | Status: WHS, Broken: B, A >
      if B == yes .
  ceq < W :Window | Status: WS, Broken: B, A > (msg AS from C to W)
      = setStatus(< W :Window | Status: WS, Broken: B, A >, AS)
      if B == no .
  ceq < W :Window | Status: WS, Broken: B, A > (msg AS from C to W)
      = < W :Window | Status: WS, Broken: B, A >
      if B == yes .

endfm
