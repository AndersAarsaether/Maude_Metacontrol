mod ACTUATORS is
  protecting STRING .
  protecting FLOAT .

  *** The components of the system
  sorts Oid Heater Waterheater Window Actuator Configuration .
  subsorts Heater Window Waterheater < Actuator .
  subsort Actuator < Configuration .
  subsort String < Oid .  *** Object identifier

  op none : -> Configuration [ctor] .
  op __ : Configuration Configuration -> Configuration [ctor comm assoc id: none] .

  *** The statuses of the components
  sorts HeaterStatus WaterheaterStatus WindowStatus ActuatorStatus .
  subsorts HeaterStatus WaterheaterStatus WindowStatus < ActuatorStatus .

  *** The values the statuses can take
  ops hOff fairlyhot veryhot : -> HeaterStatus .
  ops whOff on : -> WaterheaterStatus .
  ops open halfopen closed : -> WindowStatus .

  *** The additional attributes of the heater and window
  sorts RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Broken .
  subsort Float < EffectTemp .              *** The effect indicates how much the actuator can decrease and increase the temperature in the room.
  subsort Float < EffectAQ .                *** The effect indicates how much the actuator can decrease and increase the air quality in the room.
  ops yes no : -> RuleAppliedTemp .         *** Indicates whether a temperature rule was applied at the current time step.
  ops yes no : -> RuleAppliedAQ .           *** Indicates whether an air quality rule was applied at the current time step
  ops yes no : -> Broken .                  *** Indicates whether the actuator is broken or not.

  *** Specification of the components
  op < _ :Heater | Status: _, RuleAppliedTemp: _, RuleAppliedAQ: _, EffectsTemp: _, EffectsAQ: _, Broken: _ > : Oid HeaterStatus RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Broken -> Heater [format (ntb b b b b b b b b b b b b b b b b b b b b b o)] .
  op < _ :Waterheater | Status: _, RuleAppliedTemp: _, RuleAppliedAQ: _, EffectsTemp: _, EffectsAQ: _, Broken: _ > : Oid WaterheaterStatus RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Broken -> Waterheater [format (ntb b b b b b b b b b b b b b b b b b b b b b o)] .
  op < _ :Window | Status: _, RuleAppliedTemp: _, RuleAppliedAQ: _, EffectsTemp: _, EffectsAQ: _, Broken: _ > : Oid WindowStatus RuleAppliedTemp RuleAppliedAQ EffectTemp EffectAQ Broken -> Window [format (ntb b b b b b b b b b b b b b b b b b b b b b o)] .




  vars H WH W C : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var AS : ActuatorStatus .
  var RA : RuleAppliedTemp .
  var RAAQ : RuleAppliedAQ .
  var ET : EffectTemp .
  var EAQ : EffectAQ .
  var B : Broken .

  *** Get status of actuator
  op getStatus : Actuator -> ActuatorStatus .
  eq getStatus(< H :Heater | Status: HS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >) = HS .
  eq getStatus(< WH :Waterheater | Status: WHS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >) = WHS .
  eq getStatus(< W :Window | Status: WS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >) = WS .

  *** Set status of actuator (if wrong type of actuator status is inserted, nothing happens)
  op setStatus : Actuator ActuatorStatus -> Actuator .
  ceq setStatus(< H :Heater | Status: HS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >, AS)
      = < H :Heater | Status: AS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
      if AS : HeaterStatus .
  ceq setStatus(< WH :Waterheater | Status: WHS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >, AS)
      = < WH :Waterheater | Status: AS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
      if AS : WaterheaterStatus .
  ceq setStatus(< W :Window | Status: WS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >, AS)
      = < W :Window | Status: AS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
      if AS : WindowStatus .


  *** Messages
  sorts Msg .
  subsorts Msg < Configuration .

  *** Send messages
  op msg_from_to_ : ActuatorStatus Oid Oid -> Msg [format(ntg g g g g g g)] .

  *** Receive messages
  *** If actuator is not broken, set status. If actuator is broken, ignore message.
  ceq < H :Heater | Status: HS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > (msg AS from C to H)
      = setStatus(< H :Heater | Status: HS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >, AS)
      if B == no .
  ceq < H :Heater | Status: HS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > (msg AS from C to H)
      = < H :Heater | Status: HS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
      if B == yes .
  ceq < WH :Waterheater | Status: WHS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > (msg AS from C to WH)
      = setStatus(< WH :Waterheater | Status: WHS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >, AS)
      if B == no .
  ceq < WH :Waterheater | Status: WHS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > (msg AS from C to WH)
      = < WH :Waterheater | Status: WHS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
      if B == yes .
  ceq < W :Window | Status: WS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > (msg AS from C to W)
      = setStatus(< W :Window | Status: WS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >, AS)
      if B == no .
  ceq < W :Window | Status: WS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > (msg AS from C to W)
      = < W :Window | Status: WS, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B >
      if B == yes .



endm
eof

red changeStatus(< "homeHeater" :Heater | Status: fairlyhot, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: 1.0, EffectsAQ: -0.5, Broken: no >, (msg hOff from "C" to "homeHeater")) .
red changeStatus(< "homeHeater" :Heater | Status: fairlyhot, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: 1.0, EffectsAQ: -0.5, Broken: no >, (msg whOff from "C" to "homeHeater")) .
red changeStatus(< "homeWaterheater" :Waterheater | Status: on, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: 0.5, EffectsAQ: -0.25, Broken: no >, (msg whOff from "C" to "homeWaterheater")) .
red changeStatus(< "homeWaterheater" :Waterheater | Status: on, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: 0.5, EffectsAQ: -0.25, Broken: no >, (msg hOff from "C" to "homeWaterheater")) .
red changeStatus(< "homeWindow" :Window | Status: open, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: -0.5, EffectsAQ: 1.0, Broken: no >, (msg closed from "C" to "homeWindow")) .
red changeStatus(< "homeWindow" :Window | Status: open, RuleAppliedTemp: yes, RuleAppliedAQ: yes, EffectsTemp: -0.5, EffectsAQ: 1.0, Broken: no >, (msg hOff from "C" to "homeWindow")) .
