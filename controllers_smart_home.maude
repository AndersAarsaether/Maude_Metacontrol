mod CONTROLLERS is
  protecting ACTUATORS .
  protecting TEMPERATURE .
  protecting AIRQUALITY .
  protecting TIME .

  sort HeaterErrController WaterheaterErrController WindowErrController ComfortController EcoController .
  subsort HeaterErrController WaterheaterErrController WindowErrController ComfortController EcoController < Configuration .

  *** Indicates whether the current controller is active or passive at the moment.
  sort Selected .
  ops yes no : -> Selected .

  op < _ :HeaterErrController | Selected: _ > : Oid Selected -> HeaterErrController [format (nty y y y y y y o)] .
  op < _ :WaterheaterErrController | Selected: _ > : Oid Selected -> WaterheaterErrController [format (nty y y y y y y o)] .
  op < _ :WindowErrController | Selected: _ > : Oid Selected -> WindowErrController [format (nty y y y y y y o)] .
  op < _ :ComfortController | Selected: _ > : Oid Selected -> ComfortController [format (nty y y y y y y o)] .
  op < _ :EcoController | Selected: _ > : Oid Selected -> EcoController [format (nty y y y y y y o)] .

  vars H W WH T C CC AQ : Oid .
  var DG : Temperature .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var AQS : AirqualityStatus .
  var TI : Time .
  var TS : Timesteps .
  vars ET ET1 ET2 : EffectTemp .
  vars EAQ EAQ1 EAQ2 : EffectAQ .
  vars RAT RAT1 RAT2 : RuleAppliedTemp .
  vars RAAQ RAAQ1 RAAQ2 : RuleAppliedAQ .

  *** Rules for the controller focussing on comfort (warm room)
  *** Not in the morning
  crl [CContrTempOkAqOk] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no  >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no  >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2  >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: yes >
    =>
    < H :Heater | Status: off, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no  >
    < WH :Waterheater | Status: off, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no  >
    < W :Window | Status: closed, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2  >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: yes >
    if morning?(TI) == false /\ hot?(DG) == false /\ cold?(DG) == false /\ aqok?(AQS) == true
    [print "rule: [CContrTempOkAqOk]"] .

  crl [CContrTempOkAqNotOk1] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no  >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no  >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2  >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: yes >
    =>
    < H :Heater | Status: off, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no  >
    < WH :Waterheater | Status: off, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no  >
    < W :Window | Status: halfopen, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2  >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: yes >
    if morning?(TI) == false /\ hot?(DG) == false /\ cold?(DG) == false /\ aqok?(AQS) == false /\ WS =/= open
    [print "rule: [CContrTempOkAqNotOk1]"] .

  crl [CContrTempOkAqNotOk2] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no  >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no  >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2  >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: yes >
    =>
    < H :Heater | Status: off, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no  >
    < WH :Waterheater | Status: off, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no  >
    < W :Window | Status: open, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2  >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < AQ :Airquality | Value: AQS >
    < CC :ComfortController | Selected: yes >
    if morning?(TI) == false /\ hot?(DG) == false /\ cold?(DG) == false /\ aqok?(AQS) == false /\ WS == open
    [print "rule: [CContrTempOkAqNotOk2]"] .

  crl [CContrTempLow] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no  >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no  >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2  >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < CC :ComfortController | Selected: yes >
    =>
    < H :Heater | Status: veryhot, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no  >
    < WH :Waterheater | Status: on, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no  >
    < W :Window | Status: closed, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2  >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < CC :ComfortController | Selected: yes >
    if morning?(TI) == false /\ cold?(DG) == true
    [print "rule: [CContrTempLow]"] .

  crl [CContrTempHigh] :
    < H :Heater | Status: HS, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no  >
    < WH :Waterheater | Status: WHS, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no  >
    < W :Window | Status: WS, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2  >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < CC :ComfortController | Selected: yes >
    =>
    < H :Heater | Status: off, RuleAppliedTemp: RAT, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: no  >
    < WH :Waterheater | Status: off, RuleAppliedTemp: RAT1, RuleAppliedAQ: RAAQ1, EffectsTemp: ET1, EffectsAQ: EAQ1, Broken: no  >
    < W :Window | Status: open, RuleAppliedTemp: RAT2, RuleAppliedAQ: RAAQ2, EffectsTemp: ET2, EffectsAQ: EAQ2  >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI >
    < CC :ComfortController | Selected: yes >
    if morning?(TI) == false /\ hot?(DG) == true
    [print "rule: [CContrTempHigh]"] .



endm
eof
*** Rules for not morning
***If T is low, then the H goes to VH, the WH to ON, and the W to closed
***If T is ok and AQ is ok, then H and WH to off and W closed
***If T is ok, AQ is not ok, and W is not open, then H and WH off and W mid-open
***If T is ok, AQ is not ok, and W is open, then H and WH off and W open
***If T is high, then H and WH off and W open
