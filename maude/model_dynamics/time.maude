in ../metacontrol/metacontrol.maude

mod TIME is
  protecting METACONTROL .

  vars C QA : Oid .
  var TS : Timesteps .
  var TI : Time .
  var N : Nat .
  var QAS : QaStatus .
  var QAL : List{Bool} .
  vars CONF : Configuration .
  vars TL AL : TVPList .
  var T : Temperature .
  var AQ : AirqualityStatus .

  *** If the time advances by one time step, enable the QA objects to apply rules again
  op advance : Configuration -> Configuration .
  eq advance(< QA :QaComfTemp | Consider: N, Past: QAL, Status: QAS, QaComputed: yes > CONF)
      = < QA :QaComfTemp | Consider: N, Past: QAL, Status: QAS, QaComputed: no > advance(CONF) .
  eq advance(< QA :QaAirPurity | Consider: N, Past: QAL, Status: QAS, QaComputed: yes > CONF)
      = < QA :QaAirPurity | Consider: N, Past: QAL, Status: QAS, QaComputed: no > advance(CONF) .
  eq advance(CONF) = CONF [owise] .

  *** Time advances by one time step, the temperature and air quality log are updated
  crl [timeAdvances] :
    {< C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: TimeChange, RuleApplied: false > CONF}
    =>
    {< C :Clock | Timesteps: getTime(TS + 1), Time: getTime(TS + 1), TempLog: TL (TS, getRepresentedValue(T)), AqLog: AL (TS, toFloat(AQ)) >
    < Scheduler | Status: TimeChange, RuleApplied: true > advance(CONF)}
    if T := getTemp(CONF) /\ AQ := getAirquality(CONF)
    [print "rule: [timeAdvances]"] .



endm
eof
