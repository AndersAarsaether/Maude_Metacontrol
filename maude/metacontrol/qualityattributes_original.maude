mod QUALITYATTRIBUTES is
  protecting PHYSICS .
  protecting RAT .
  protecting LIST{Bool} .
  protecting LIST{Nat} .


  var CONF : Configuration .
  vars T C AQ : Oid .
  var DG : Temperature .
  var AQS : AirqualityStatus .
  vars QAS newQAS : QaStatus .
  vars N M : Nat .
  var B : Bool .
  var AT : Attribute .
  var QAC : QaComputed .
  vars QAL newQAL : List{Bool} .
  var QAA : QaAttributes .

  *** Object for the required QA values
  sort Objective .
  subsort Objective < Configuration .

  op < RequiredQAs | requQaCT: _, requQaAP: _ > : Rat Rat -> Objective [format(ntc c c c c c c c c c)].


  ******************** Relevant for both QA CT and QA AP
  sorts QaStatus QaComputed QaAttributes .
  subsort Rat < QaStatus .
  ops yes no : -> QaComputed .

  op Consider: _ : Nat -> QaAttributes [ctor] .
  op Past: _ : List{Bool} -> QaAttributes [ctor] .
  op Status: _ : QaStatus -> QaAttributes [ctor] .
  op QaComputed: _ : QaComputed -> QaAttributes [ctor] .
  op _, _ : QaAttributes QaAttributes -> QaAttributes [ctor comm assoc] .

  *** Get the N last added elements of a list (we suppose that List{Bool} has at least N elements)
  op getLast : Nat List{Bool} -> List{Bool} .
  eq getLast(0, QAL) = nil .
  eq getLast(1, B) = B .
  eq getLast(s(N), QAL B) = getLast(N, QAL) B .

  *** Compute the number of 'true' in a List{Bool}
  op computeTrue : List{Bool} -> Nat .
  eq computeTrue(nil) = 0 .
  eq computeTrue(true) = 1 .
  eq computeTrue(false) = 0 .
  eq computeTrue(QAL true) = 1 + computeTrue(QAL) .
  eq computeTrue(QAL false) = computeTrue(QAL) .

  *** Compute the value of the QA CT or QA AP as the percentage of time in the last N time steps that the temperature was comfortable/air quality was good
  op computeQA : Nat List{Bool} -> QaStatus .
  ceq computeQA(N, QAL) = computeTrue(getLast(N,QAL)) / N
    if N <= size(QAL) .
  ceq computeQA(N, QAL) = computeTrue(QAL) / M
    if M := size(QAL) /\ N > M .


  ******************** Quality Attribute Comfortable Temperature
  sort QaComfTemp .
  subsort QaComfTemp < Configuration .

  *** Determine whether current configuration is in comfortable temperature or not (between 19.1 and 21.5 degrees)
  op comfortable : Configuration -> Bool .
  ceq comfortable(< T :Thermometer | Degrees: DG > CONF) = true
    if 19.1 <= DG and DG <= 21.5 .
  eq comfortable(CONF) = false [owise] .

  *** We can specify the number of time steps that we want to consider when computing the QA CT value here
  op < _ :QaComfTemp | _ > : Oid QaAttributes -> QaComfTemp [format (ntg g g g g g g)] .


  ******************** Quality Attribute Air Purity
  sort QaAirPurity .
  subsort QaAirPurity < Configuration .

  *** Determine whether current configuration is in good air quality status or not (above 0.7)
  op aqGood : Configuration -> Bool .
  ceq aqGood(< AQ :Airquality | Value: AQS > CONF) = true
    if AQS >= 0.7  .
  eq aqGood(CONF) = false [owise] .

  *** We can specify the number of time steps that we want to consider when computing the QA AP value here
  op < _ :QaAirPurity | _ > : Oid QaAttributes -> QaAirPurity [format (ntg g g g g g g)] .


  ******************** For scheduler
  op QAready : Configuration -> Bool .
  eq QAready(< C :QaComfTemp | QaComputed: no, QAA > CONF) = false .
  eq QAready(< AQ :QaAirPurity | QaComputed: no, QAA > CONF) = false .
  eq QAready(CONF) = true [owise] .


  ******************** Rules
  *** The value of the QAs should be computed every time step
  crl [QaComfTemp] :
    {< C :QaComfTemp | Consider: N, Past: QAL, Status: QAS, QaComputed: no >
    < Scheduler | Status: QAChange, RuleApplied: B > CONF}
    =>
    {< C :QaComfTemp | Consider: N, Past: newQAL, Status: newQAS, QaComputed: yes >
    < Scheduler | Status: QAChange, RuleApplied: B > CONF}
    if newQAL := append(QAL, comfortable(CONF)) /\ newQAS := computeQA(N, newQAL)
    [print "rule: [QaComfTemp], QA ComfTemp before: " QAS ", QA ComfTemp after: " newQAS] .

  crl [QaAirPurity] :
    {< AQ :QaAirPurity | Consider: N, Past: QAL, Status: QAS, QaComputed: no >
    < Scheduler | Status: QAChange, RuleApplied: B > CONF}
    =>
    {< AQ :QaAirPurity | Consider: N, Past: newQAL, Status: newQAS, QaComputed: yes >
    < Scheduler | Status: QAChange, RuleApplied: B > CONF}
    if newQAL := append(QAL, aqGood(CONF)) /\ newQAS := computeQA(N, newQAL)
    [print "rule: [QaAirPurity], QA AirPurity before: " QAS ", QA AirPurity after: " newQAS] .

endm
