in thermometer.maude
in airquality.maude
in ../model_dynamics/clock.maude
in ../model_dynamics/scheduler.maude

mod PHYSICS is
  protecting THERMOMETER .
  protecting AIRQUALITY .
  protecting CLOCK .
  protecting SCHEDULER .

  vars H WH W T C AQ : Oid .
  vars DG newDG : Temperature .
  vars AQS newAQS : AirqualityStatus .
  var ET : EffectTemp .
  var EAQ : EffectAQ .
  var A : Attribute .
  var CONF : Configuration .
  var TS : Timesteps .
  var TI : Time .
  vars TL AL : TVPList .

  *** Determine how much the temperature in the room changed, depending on the status of the actuators and the time
  op changeTempBy : Configuration -> Float .
  eq changeTempBy(< H :Heater | Status: fairlyhot, EffectTemp: ET, A > CONF) = ET + changeTempBy(CONF) .
  eq changeTempBy(< H :Heater | Status: veryhot, EffectTemp: ET, A > CONF) = (2.0 * ET) + changeTempBy(CONF) .
  eq changeTempBy(< WH :Waterheater | Status: on, EffectTemp: ET, A > CONF) = ET + changeTempBy(CONF) .
  eq changeTempBy(< W :Window | Status: halfopen, EffectTemp: ET, A > CONF) = ET + changeTempBy(CONF) .
  eq changeTempBy(< W :Window | Status: open, EffectTemp: ET, A > CONF) = (2.0 * ET) + changeTempBy(CONF) .
  ceq changeTempBy(< C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL > CONF) = -0.5 + changeTempBy(CONF)
    if 0 <= TI and TI < 6 .
  ceq changeTempBy(< C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL > CONF) = -0.25 + changeTempBy(CONF)
    if 6 <= TI and TI < 12 .
  ceq changeTempBy(< C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL > CONF) = -0.25 + changeTempBy(CONF)
    if 18 <= TI .
  eq changeTempBy(CONF) = 0.0 [owise] .

  *** Determine how much the air quality in the room changed, depending on the status of the actuators
  op changeAqBy : Configuration -> Float .
  eq changeAqBy(< H :Heater | Status: fairlyhot, EffectAQ: EAQ, A > CONF) = EAQ + changeAqBy(CONF) .
  eq changeAqBy(< H :Heater | Status: veryhot, EffectAQ: EAQ, A > CONF) = (2.0 * EAQ) + changeAqBy(CONF) .
  eq changeAqBy(< WH :Waterheater | Status: on, EffectAQ: EAQ, A > CONF) = EAQ + changeAqBy(CONF) .
  eq changeAqBy(< W :Window | Status: closed, EffectAQ: EAQ, A > CONF) = -0.125 + changeAqBy(CONF) .
  eq changeAqBy(< W :Window | Status: halfopen, EffectAQ: EAQ, A > CONF) = EAQ + changeAqBy(CONF) .
  eq changeAqBy(< W :Window | Status: open, EffectAQ: EAQ, A > CONF) = (2.0 * EAQ) + changeAqBy(CONF) .
  eq changeAqBy(CONF) = 0.0 [owise] .


  *** Change temperature and air quality in the room, depending on the values of the above functions
  crl [changeTempAq] :
    {< T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < Scheduler | Status: PhysicsChange, RuleApplied: false > CONF}
    =>
    {< T :Thermometer | Degrees: newDG >
    < AQ :Airquality | Value: newAQS >
    < Scheduler | Status: PhysicsChange, RuleApplied: true > CONF}
    if newDG := DG + changeTempBy(CONF) /\ newAQS := AQS + changeAqBy(CONF)
    [print "rule: [changeTempAq], Change Temp from " DG " to " newDG " and AQ from " AQS " to " newAQS] .

endm
