in comfort_controller.maude
in eco_controller.maude
in heater_err_controller.maude
in wh_error_controller.maude
in window_error_controller.maude
in qualityattributes.maude

mod METACONTROL is
  protecting COMFORTCONTROLLER .
  protecting ECOCONTROLLER .
  protecting HEATERERRCONTROLLER .
  protecting WATERHEATERERRCONTROLLER .
  protecting WINDOWERRCONTROLLER .
  protecting QUALITYATTRIBUTES .


  sort Metacontroller .
  subsort Metacontroller < Configuration .

  sorts ContrSelected MetaPair MetaLog .
  subsort MetaPair < MetaLog .
  ops Eco Comf HErr WhErr WErr : -> ContrSelected [ctor] .
  op (_, _) : Timesteps ContrSelected -> MetaPair [ctor] .
  op nil : -> MetaLog [ctor] .
  op __ : MetaLog MetaLog -> MetaLog [ctor assoc id: nil] .

  op < _ :Metacontroller | MetaLog: _ > : Oid MetaLog -> Metacontroller [format (ntr r r r r r r o)] .

  vars H WH W CC EC HEC WHEC WEC MC QAC QAAQ C : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var A : Attribute .
  var N : Nat .
  var QAL : List{Bool} .
  var QAS : QaStatus .
  var QACOM : QAComputed .
  var CONF : Configuration .
  var SC : ScheduleComponents .
  vars B B1 B2 B3 : Bool .
  var R : Rat .
  var ML : MetaLog .
  var TS : Timesteps .
  var TI : Time .
  vars TL AL : TVPList .
  vars S S1 S2 : Selected .


  ********** Cost function qualtiy attributes
  op cost : Configuration -> Rat .
  eq cost(CONF) = 5/10 * getQaComfValue(CONF) + 4/10 * getQaAqValue(CONF) + 1/10 * getQaEcoValue(CONF) .

  *** If no metacontroller is in initial configuration, we want to have a dummy rule s.t. we can test without metacontroller
  op noMetacontr : Configuration -> Bool .
  eq noMetacontr(< MC :Metacontroller | MetaLog: ML > CONF) = false .
  eq noMetacontr(CONF) = true [owise] .



*** TODO Should the metacontroller also turn the actuators off?
  ****************** Rules
  ****************************************** From comfort controller to error controller
  *** If the comfort or eco controller is active and the heater is broken, then activate the heater error controller
  rl [MetaContrHErr] :
    < H :Heater | Broken: yes, Status: HS, A >
    < CC :ComfortController | Selected: S >
    < EC :EcoController | Selected: S1 >
    < HEC :HeaterErrController | Selected: S2 >
    < MC :Metacontroller | MetaLog: ML >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: false, ContrChange: B1 >
    =>
    < H :Heater | Broken: yes, Status: hOff, A >
    < CC :ComfortController | Selected: false >
    < EC :EcoController | Selected: false >
    < HEC :HeaterErrController | Selected: true >
    < MC :Metacontroller | MetaLog: ML (TS, HErr) >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: true, ContrChange: B1 >
    [print "rule: [MetaContrHErr]"] .

  *** If the comfort or eco controller is active and the water heater is broken, then activate the water heater error controller
  rl [MetaContrWhErr] :
    < WH :Waterheater | Broken: yes, Status: WHS, A >
    < CC :ComfortController | Selected: S >
    < EC :EcoController | Selected: S1 >
    < WHEC :WaterheaterErrController | Selected: S2 >
    < MC :Metacontroller | MetaLog: ML >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: false, ContrChange: B1 >
    =>
    < WH :Waterheater | Broken: yes, Status: whOff, A >
    < CC :ComfortController | Selected: false >
    < EC :EcoController | Selected: false >
    < WHEC :WaterheaterErrController | Selected: true >
    < MC :Metacontroller | MetaLog: ML (TS, WhErr) >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: true, ContrChange: B1 >
    [print "rule: [MetaContrWhErr]"] .

  *** If the comfort or eco controller is active and the window is broken, then activate the window error controller
  rl [MetaContrWErr] :
    < W :Window | Broken: yes, Status: WS, A >
    < CC :ComfortController | Selected: S >
    < EC :EcoController | Selected: S1 >
    < WEC :WindowErrController | Selected: S2 >
    < MC :Metacontroller | MetaLog: ML >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: false, ContrChange: B1 >
    =>
    < W :Window | Broken: yes, Status: halfopen, A >
    < CC :ComfortController | Selected: false >
    < EC :EcoController | Selected: false >
    < WEC :WindowErrController | Selected: true >
    < MC :Metacontroller | MetaLog: ML (TS, WErr) >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: true, ContrChange: B1 >
    [print "rule: [MetaContrWErr]"] .


  ************************************** Change to comfort or eco controller
  *** If QA air purity >= 0.7 and QA comf < 7/10, then choose comfort controller
  crl [MetaContrChooseComf] :
    {< CC :ComfortController | Selected: S >
    < EC :EcoController | Selected: S1 >
    < MC :Metacontroller | MetaLog: ML >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: false, ContrChange: B1 >
    CONF}
    =>
    {< CC :ComfortController | Selected: true >
    < EC :EcoController | Selected: false >
    < MC :Metacontroller | MetaLog: ML (TS, Comf) >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: true, ContrChange: B1 >
    CONF}
    if oneBroken(CONF) == false /\ getQaAqValue(CONF) >= 5/10 /\ getQaComfValue(CONF) < 5/10
    [print "rule: [MetaContrChooseComf]"] .

  *** If QA comfort >= 0.7 and QA air purity < 0.7, then choose eco controller
  crl [MetaContrChooseEco] :
    {< EC :EcoController | Selected: S1 >
    < CC :ComfortController | Selected: S >
    < MC :Metacontroller | MetaLog: ML >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: false, ContrChange: B1 >
    CONF}
    =>
    {< EC :EcoController | Selected: true >
    < CC :ComfortController | Selected: false >
    < MC :Metacontroller | MetaLog: ML (TS, Eco) >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: true, ContrChange: B1 >
    CONF}
    if oneBroken(CONF) == false /\ getQaComfValue(CONF) >= 5/10 /\ getQaAqValue(CONF) < 5/10
    [print "rule: [MetaContrChooseEco]"] .

  ************** If QA comfort >= 0.7 and QA air purity >= 0.7, then decide with cost function
  *** If cost < 0.7, then choose the comfort controller
  crl [MetaContrCostComf] :
    {< CC :ComfortController | Selected: S >
    < EC :EcoController | Selected: S1 >
    < MC :Metacontroller | MetaLog: ML >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: false, ContrChange: B1 >
    CONF}
    =>
    {< CC :ComfortController | Selected: true >
    < EC :EcoController | Selected: false >
    < MC :Metacontroller | MetaLog: ML (TS, Eco) >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: true, ContrChange: B1 >
    CONF}
    if oneBroken(CONF) == false /\ getQaComfValue(CONF) >= 5/10 /\ getQaAqValue(CONF) >= 5/10 /\ cost(CONF) < 7/10
    [print "rule: [MetaContrChooseCost]"] .

  *** If cost > 0.7, then choose the eco controller
  crl [MetaContrCostEco] :
    {< EC :EcoController | Selected: S1 >
    < CC :ComfortController | Selected: S >
    < MC :Metacontroller | MetaLog: ML >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: false, ContrChange: B1 >
    CONF}
    =>
    {< EC :EcoController | Selected: true >
    < CC :ComfortController | Selected: false >
    < MC :Metacontroller | MetaLog: ML (TS, Eco) >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < Scheduler | Status: MCChange, TempAqChange: B, McChange: true, ContrChange: B1 >
    CONF}
    if oneBroken(CONF) == false /\ getQaComfValue(CONF) >= 5/10 /\ getQaAqValue(CONF) >= 5/10 /\ cost(CONF) >= 7/10
    [print "rule: [MetaContrCostEco]"] .


  *************************** Dummy rules
  *** If there is no metacontroller, this rules ensures that we can run tests anyway
  crl [noMetacontroller] :
    {< Scheduler | Status: MCChange, TempAqChange: B, McChange: false, ContrChange: B1 > CONF}
    =>
    {< Scheduler | Status: MCChange, TempAqChange: B, McChange: true, ContrChange: B1 > CONF}
    if noMetacontr(CONF) == true
    [print "rule: [noMetacontr]"] .

endm
eof
