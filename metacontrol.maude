in comfort_controller.maude
in eco_controller.maude
in heater_err_controller.maude
in wh_error_controller.maude
in window_error_controller.maude
in qualityattributes.maude

mod METACONTROL is
  protecting COMFORTCONTROLLER .
  protecting ECOCONTROLLER .
  protecting HEATERERRCONTROLLER .
  protecting WATERHEATERERRCONTROLLER .
  protecting WINDOWERRCONTROLLER .
  protecting QUALITYATTRIBUTES .


  sort Metacontroller .
  subsort Metacontroller < Configuration .

  sort ControllersChanged .
  ops yes no : -> ControllersChanged .

  op < _ :Metacontroller | ControllersChanged: _ > : Oid ControllersChanged -> Metacontroller [format (ntr r r r r r r o)] .

  vars H WH W CC EC HEC WHEC WEC MC QAC QAAQ : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var A : Attribute .
  var N : Nat .
  var QAL : QaList .
  var QAS : QaStatus .
  var CCH : ConfigChanged .
  var QACOM : QAComputed .
  var CONF : Configuration .
  var SC : ScheduleComponents .

  *** Determine if metacontroller changed configuration (to do tests without metacontroller)
  op metacontrollerReady : Configuration -> Bool .
  eq metacontrollerReady(< MC :Metacontroller | ControllersChanged: no > CONF) = false .
  eq metacontrollerReady(CONF) = true [owise] .



  ******** Checks from comfort to other controller
  *** Check whether metacontroller should change from comfort to heater error controller
  op metaComfToHErr : Configuration -> Bool .
  eq metaComfToHErr(< H :Heater | Broken: no, A > CONF) = false and metaComfToHErr(CONF) .
  eq metaComfToHErr(< CC :ComfortController | Selected: false, ConfigChanged: CCH > CONF) = false and metaComfToHErr(CONF) .
  eq metaComfToHErr(< HEC :HeaterErrController | Selected: true, ConfigChanged: CCH > CONF) = false and metaComfToHErr(CONF) .
  eq metaComfToHErr(< MC :Metacontroller | ControllersChanged: yes > CONF) = false and metaComfToHErr(CONF) .
  ceq metaComfToHErr(< Scheduler: SC > CONF) = false and metaComfToHErr(CONF)
    if SC =/= MCChange .
  eq metaComfToHErr(CONF) = true [owise] .

  *** Check whether metacontroller should change from comfort to water heater error controller
  op metaComfToWhErr : Configuration -> Bool .
  eq metaComfToWhErr(< WH :Waterheater | Broken: no, A > CONF) = false and metaComfToWhErr(CONF) .
  eq metaComfToWhErr(< CC :ComfortController | Selected: false, ConfigChanged: CCH > CONF) = false and metaComfToWhErr(CONF) .
  eq metaComfToWhErr(< WHEC :WaterheaterErrController | Selected: true, ConfigChanged: CCH > CONF) = false and metaComfToWhErr(CONF) .
  eq metaComfToWhErr(< MC :Metacontroller | ControllersChanged: yes > CONF) = false and metaComfToWhErr(CONF) .
  ceq metaComfToWhErr(< Scheduler: SC > CONF) = false and metaComfToWhErr(CONF)
    if SC =/= MCChange .
  eq metaComfToWhErr(CONF) = true [owise] .

  *** Check whether metacontroller should change from comfort to window error controller
  op metaComfToWErr : Configuration -> Bool .
  eq metaComfToWErr(< W :Window | Broken: no, A > CONF) = false and metaComfToWErr(CONF) .
  eq metaComfToWErr(< CC :ComfortController | Selected: false, ConfigChanged: CCH > CONF) = false and metaComfToWErr(CONF) .
  eq metaComfToWErr(< WEC :WindowErrController | Selected: true, ConfigChanged: CCH > CONF) = false and metaComfToWErr(CONF) .
  eq metaComfToWErr(< MC :Metacontroller | ControllersChanged: yes > CONF) = false and metaComfToWErr(CONF) .
  ceq metaComfToWErr(< Scheduler: SC > CONF) = false and metaComfToWErr(CONF)
    if SC =/= MCChange .
  eq metaComfToWErr(CONF) = true [owise] .

  *** Check whether metacontroller should change from comfort to eco controller
  op metaComfToEco : Configuration -> Bool .
  eq metaComfToEco(< CC :ComfortController | Selected: false, ConfigChanged: CCH > CONF) = false and metaComfToEco(CONF) .
  eq metaComfToEco(< EC :EcoController | Selected: true, ConfigChanged: CCH > CONF) = false and metaComfToEco(CONF) .
  ceq metaComfToEco(< QAAQ :QaAirquality | Consider: N, Past: QAL, Status: QAS, QAComputed: QACOM > CONF) = false and metaComfToEco(CONF)
    if QAS >= 6/10 .
  eq metaComfToEco(< MC :Metacontroller | ControllersChanged: yes > CONF) = false and metaComfToEco(CONF) .
  ceq metaComfToEco(< Scheduler: SC > CONF) = false and metaComfToEco(CONF)
    if SC =/= MCChange .
  eq metaComfToEco(CONF) = true [owise] .


  ****** Check from eco to other controller
  *** Check whether metacontroller should change from eco to window error controller
  op metaEcoToHErr : Configuration -> Bool .
  eq metaEcoToHErr(< H :Heater | Broken: no, A > CONF) = false and metaEcoToHErr(CONF) .
  eq metaEcoToHErr(< EC :EcoController | Selected: false, ConfigChanged: CCH > CONF) = false and metaEcoToHErr(CONF) .
  eq metaEcoToHErr(< HEC :HeaterErrController | Selected: true, ConfigChanged: CCH > CONF) = false and metaEcoToHErr(CONF) .
  eq metaEcoToHErr(< MC :Metacontroller | ControllersChanged: yes > CONF) = false and metaEcoToHErr(CONF) .
  ceq metaEcoToHErr(< Scheduler: SC > CONF) = false and metaEcoToHErr(CONF)
    if SC =/= MCChange .
  eq metaEcoToHErr(CONF) = true [owise] .

  *** Check whether metacontroller should change from eco to window error controller
  op metaEcoToWhErr : Configuration -> Bool .
  eq metaEcoToWhErr(< WH :Waterheater | Broken: no, A > CONF) = false and metaEcoToWhErr(CONF) .
  eq metaEcoToWhErr(< EC :EcoController | Selected: false, ConfigChanged: CCH > CONF) = false and metaEcoToWhErr(CONF) .
  eq metaEcoToWhErr(< HEC :WaterheaterErrController | Selected: true, ConfigChanged: CCH > CONF) = false and metaEcoToWhErr(CONF) .
  eq metaEcoToWhErr(< MC :Metacontroller | ControllersChanged: yes > CONF) = false and metaEcoToWhErr(CONF) .
  ceq metaEcoToWhErr(< Scheduler: SC > CONF) = false and metaEcoToWhErr(CONF)
    if SC =/= MCChange .
  eq metaEcoToWhErr(CONF) = true [owise] .

  *** Check whether metacontroller should change from eco to window error controller
  op metaEcoToWErr : Configuration -> Bool .
  eq metaEcoToWErr(< W :Window | Broken: no, A > CONF) = false and metaEcoToWErr(CONF) .
  eq metaEcoToWErr(< EC :EcoController | Selected: false, ConfigChanged: CCH > CONF) = false and metaEcoToWErr(CONF) .
  eq metaEcoToWErr(< HEC :WindowErrController | Selected: true, ConfigChanged: CCH > CONF) = false and metaEcoToWErr(CONF) .
  eq metaEcoToWErr(< MC :Metacontroller | ControllersChanged: yes > CONF) = false and metaEcoToWErr(CONF) .
  ceq metaEcoToWErr(< Scheduler: SC > CONF) = false and metaEcoToWErr(CONF)
    if SC =/= MCChange .
  eq metaEcoToWErr(CONF) = true [owise] .

  *** Check whether metacontroller should change from eco to comfort controller
  op metaEcoToComf : Configuration -> Bool .
  eq metaEcoToComf(< EC :EcoController | Selected: false, ConfigChanged: CCH > CONF) = false and metaEcoToComf(CONF) .
  eq metaEcoToComf(< CC :ComfortController | Selected: true, ConfigChanged: CCH > CONF) = false and metaEcoToComf(CONF) .
  ceq metaEcoToComf(< QAC :QaComfort | Consider: N, Past: QAL, Status: QAS, QAComputed: QACOM > CONF) = false and metaEcoToComf(CONF)
    if QAS >= 6/10 .
  eq metaEcoToComf(< MC :Metacontroller | ControllersChanged: yes > CONF) = false and metaEcoToComf(CONF) .
  ceq metaEcoToComf(< Scheduler: SC > CONF) = false and metaEcoToComf(CONF)
    if SC =/= MCChange .
  eq metaEcoToComf(CONF) = true [owise] .

  *** Check if at least one rule is applicable
  op metaRuleApplicable : Configuration -> Bool .
  eq metaRuleApplicable(CONF) = metaComfToHErr(CONF) or metaComfToWhErr(CONF) or metaComfToWErr(CONF) or metaComfToEco(CONF)
                                or metaEcoToHErr(CONF) or metaEcoToWhErr(CONF) or metaEcoToWErr(CONF) or metaEcoToComf(CONF) .



*** TODO Should the metacontroller also turn the actuators off?
  ****************** Rules
  ****************************************** From comfort controller to error controller
  *** If the comfort controller is active and the heater is broken, then activate the heater error controller
  rl [MetaContrComfortToHErr] :
    < H :Heater | Broken: yes, A >
    < CC :ComfortController | Selected: true, ConfigChanged: no >
    < HEC :HeaterErrController | Selected: false, ConfigChanged: CCH >
    < MC :Metacontroller | ControllersChanged: no >
    < Scheduler: MCChange >
    =>
    < H :Heater | Broken: yes, A >
    < CC :ComfortController | Selected: false, ConfigChanged: no >
    < HEC :HeaterErrController | Selected: true, ConfigChanged: no >
    < MC :Metacontroller | ControllersChanged: yes >
    < Scheduler: MCChange >
    [print "rule: [MetaContrComfortToHErr]"] .

  *** If the comfort controller is active and the water heater is broken, then activate the water heater error controller
  rl [MetaContrComfortToWhErr] :
    < WH :Waterheater | Broken: yes, A >
    < CC :ComfortController | Selected: true, ConfigChanged: no >
    < WHEC :WaterheaterErrController | Selected: false, ConfigChanged: CCH >
    < MC :Metacontroller | ControllersChanged: no >
    < Scheduler: MCChange >
    =>
    < WH :Waterheater | Broken: yes, A >
    < CC :ComfortController | Selected: false, ConfigChanged: no >
    < WHEC :WaterheaterErrController | Selected: true, ConfigChanged: no >
    < MC :Metacontroller | ControllersChanged: yes >
    < Scheduler: MCChange >
    [print "rule: [MetaContrComfortToWhErr]"] .

  *** If the comfort controller is active and the window is broken, then activate the window error controller
  rl [MetaContrComfortToWErr] :
    < W :Window | Broken: yes, A >
    < CC :ComfortController | Selected: true, ConfigChanged: no >
    < WEC :WindowErrController | Selected: false, ConfigChanged: CCH >
    < MC :Metacontroller | ControllersChanged: no >
    < Scheduler: MCChange >
    =>
    < W :Window | Broken: yes, A >
    < CC :ComfortController | Selected: false, ConfigChanged: no >
    < WEC :WindowErrController | Selected: true, ConfigChanged: no >
    < MC :Metacontroller | ControllersChanged: yes >
    < Scheduler: MCChange >
    [print "rule: [MetaContrComfortToWErr]"] .



  ******************************************* From eco controller to error controller
  *** If the eco controller is active and the heater is broken, then activate the heater error controller
  rl [MetaContrEcoToHErr] :
    < H :Heater | Broken: yes, A >
    < EC :EcoController | Selected: true, ConfigChanged: no >
    < HEC :HeaterErrController | Selected: false, ConfigChanged: CCH >
    < MC :Metacontroller | ControllersChanged: no >
    < Scheduler: MCChange >
    =>
    < H :Heater | Broken: yes, A >
    < EC :EcoController | Selected: false, ConfigChanged: no >
    < HEC :HeaterErrController | Selected: true, ConfigChanged: no >
    < MC :Metacontroller | ControllersChanged: yes >
    < Scheduler: MCChange >
    [print "rule: [MetaContrEcoToHErr]"] .

  *** If the eco controller is active and the water heater is broken, then activate the water heater error controller
  rl [MetaContrEcoToWhErr] :
    < WH :Waterheater | Broken: yes, A >
    < EC :EcoController | Selected: true, ConfigChanged: no >
    < WHEC :WaterheaterErrController | Selected: false, ConfigChanged: CCH >
    < MC :Metacontroller | ControllersChanged: no >
    < Scheduler: MCChange >
    =>
    < WH :Waterheater | Broken: yes, A >
    < EC :EcoController | Selected: false, ConfigChanged: no >
    < WHEC :WaterheaterErrController | Selected: true, ConfigChanged: no >
    < MC :Metacontroller | ControllersChanged: yes >
    < Scheduler: MCChange >
    [print "rule: [MetaContrEcoToWhErr]"] .

  *** If the eco controller is active and the window is broken, then activate the window error controller
  rl [MetaContrEcoToWErr] :
    < W :Window | Broken: yes, A >
    < EC :EcoController | Selected: true, ConfigChanged: no >
    < WEC :WindowErrController | Selected: false, ConfigChanged: CCH >
    < MC :Metacontroller | ControllersChanged: no >
    < Scheduler: MCChange >
    =>
    < W :Window | Broken: yes, A >
    < EC :EcoController | Selected: false, ConfigChanged: no >
    < WEC :WindowErrController | Selected: true, ConfigChanged: no >
    < MC :Metacontroller | ControllersChanged: yes >
    < Scheduler: MCChange >
    [print "rule: [MetaContrEcoToWErr]"] .




  ************************************** Change between comfort and eco controller
  *** If QA comfort is below 0.6 and eco controller is active, then change to comfort controller
  crl [MetaContrEcoToComf] :
    < CC :ComfortController | Selected: false, ConfigChanged: CCH >
    < EC :EcoController | Selected: true, ConfigChanged: no >
    < QAC :QaComfort | Consider: N, Past: QAL, Status: QAS, QAComputed: QACOM >
    < MC :Metacontroller | ControllersChanged: no >
    < Scheduler: MCChange >
    =>
    < CC :ComfortController | Selected: true, ConfigChanged: no >
    < EC :EcoController | Selected: false, ConfigChanged: no >
    < QAC :QaComfort | Consider: N, Past: QAL, Status: QAS, QAComputed: QACOM >
    < MC :Metacontroller | ControllersChanged: yes >
    < Scheduler: MCChange >
    if QAS < 6/10
    [print "rule: [MetaContrEcoToComf]"] .

  *** If QA air quality is below 0.6 and comfort controller is active, then change to eco controller
  crl [MetaContrComfToEco] :
    < CC :ComfortController | Selected: true, ConfigChanged: no >
    < EC :EcoController | Selected: false, ConfigChanged: CCH >
    < QAAQ :QaAirquality | Consider: N, Past: QAL, Status: QAS, QAComputed: QACOM >
    < MC :Metacontroller | ControllersChanged: no >
    < Scheduler: MCChange >
    =>
    < CC :ComfortController | Selected: false, ConfigChanged: no >
    < EC :EcoController | Selected: true, ConfigChanged: no >
    < QAAQ :QaAirquality | Consider: N, Past: QAL, Status: QAS, QAComputed: QACOM >
    < MC :Metacontroller | ControllersChanged: yes >
    < Scheduler: MCChange >
    if QAS < 6/10
    [print "rule: [MetaContrComfToEco]"] .



  *************************** Dummy rule
  *** TODO How do we ensure that it isn't applied if any other rule can be applied?
  crl [MetacontrollerDoesNothing] :
    {< MC :Metacontroller | ControllersChanged: no >
    < Scheduler: MCChange > CONF}
    =>
    {< MC :Metacontroller | ControllersChanged: yes >
    < Scheduler: MCChange > CONF}
    if metaRuleApplicable(< MC :Metacontroller | ControllersChanged: no > < Scheduler: MCChange > CONF) == false
    [print "rule: [MetacontrollerDoesNothing]"] .

endm
eof
