mod QUALITYATTRIBUTES is
  protecting SENSORS .
  protecting RAT .

  var CONF : Configuration .
  vars H W WH E T C AQ : Oid .
  var HS : HeaterStatus .
  var WHS : WaterheaterStatus .
  var WS : WindowStatus .
  var DG : Temperature .
  var AQS : AirqualityStatus .
  vars ET : EffectTemp .
  vars EAQ : EffectAQ .
  vars RA : RuleAppliedTemp .
  vars RAAQ : RuleAppliedAQ .
  var B : Broken .
  var EC : Energyconsumption .
  var A : Actuator .
  var QAL : QaList .
  var QAS : QaStatus .
  var N : Nat .
  var BL : Bool .

  ********************************* Ecology
  sort Energyconsumption Ecology .
  subsort Ecology < Configuration .
  subsort Float < Energyconsumption .

  op < _ :QaEcology | Value: _ > : Oid Energyconsumption -> Ecology [format (ntg g g g g g g g)] .

  *** The current energy consumption is computed in every time step as the sum of energy consumption by all actuators
  op getEnergyconsumption : Configuration -> Energyconsumption .
  *** The quality attribute value is the difference between the desired and current value
  *** QA > 0 means less energy consumption, QA < 0 means more energy consumption
  op qaEcology : Configuration -> Float .

  eq getEnergyconsumption(< H :Heater | Status: fairlyhot, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > CONF) = 2.0 + getEnergyconsumption(CONF) .
  eq getEnergyconsumption(< H :Heater | Status: veryhot, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > CONF) = 4.0 + getEnergyconsumption(CONF) .
  eq getEnergyconsumption(< WH :Waterheater | Status: on, RuleAppliedTemp: RA, RuleAppliedAQ: RAAQ, EffectsTemp: ET, EffectsAQ: EAQ, Broken: B > CONF) = 1.0 + getEnergyconsumption(CONF) .
  eq getEnergyconsumption(CONF) = 0.0 [owise] .

  eq qaEcology(CONF) = 2.0 - getEnergyconsumption(CONF) .



  ******************************** Relevant for both comfort and air quality quality attribute
  sort QaList QaStatus .
  subsort Bool < QaList .
  subsort Rat < QaStatus .
  *** A list which contains the boolean values for the last time steps
  op nil : -> QaList [ctor] .
  op __ : QaList QaList -> QaList [ctor assoc id: nil] .

  *** Get the n last added elements of a list (we suppose that QaList has at least n elements)
  *** TODO ensure that QaList has at least n elements?
  op getLast(_, _) : Nat QaList -> QaList .
  eq getLast(0, QAL) = nil .
  eq getLast(1, BL) = BL .
  eq getLast(s(N), QAL BL) = getLast(N, QAL) BL .

  *** Compute the number of 'true' in a QaList
  op computeTrue : QaList -> Nat .
  eq computeTrue(nil) = 0 .
  eq computeTrue(true) = 1 .
  eq computeTrue(false) = 0 .
  eq computeTrue(QAL true) = 1 + computeTrue(QAL) .
  eq computeTrue(QAL false) = computeTrue(QAL) .

  *** Compute the value of the quality attribute comfort or ecology as the percentage of time in the last n time steps that the temperature was comfortable/ air quality was good
  op computeQA(_, _) : Nat QaList -> QaStatus .
  eq computeQA(N, QAL) = computeTrue(getLast(N,QAL)) / N .


  ********************************* Comfort
  sort Comfort .
  subsort Comfort < Configuration .

  *** Determine whether current configuration is in comfortable temperature or not (between 20 and 22 degrees)
  op comfortable? : Configuration -> Bool .
  ceq comfortable?(< T :Thermometer | Degrees: DG > CONF) = true
    if 20.0 <= DG and DG <= 22.0 .
  eq comfortable?(CONF) = false [owise] .

  *** Adds a new boolean value to the list
  op addToListC(_, _) : Configuration QaList -> QaList .
  eq addToListC(none, QAL) = QAL .
  eq addToListC(CONF, QAL) = QAL comfortable?(CONF) .

  *** We can specify the number of time steps that we want to consider when computing the comfort value here
  op < _ :QaComfort | Consider: _, Past: _, Status: _ > : Oid Nat QaList QaStatus -> Comfort [format (ntg g g g g g g g g g g g g g)] .




  ****************************************** Air quality
  sort QaAirquality .
  subsort QaAirquality < Configuration .

  *** Determine whether current configuration is in good air quality status or not (above 2)
  op aqGood? : Configuration -> Bool .
  ceq aqGood?(< AQ :Airquality | Value: AQS > CONF) = true
    if AQS >= 2.0  .
  eq aqGood?(CONF) = false [owise] .

  *** Adds a new boolean value to the list
  op addToListAq(_, _) : Configuration QaList -> QaList .
  eq addToListAq(none, QAL) = QAL .
  eq addToListAq(CONF, QAL) = QAL aqGood?(CONF) .

  *** We can specify the number of time steps that we want to consider when computing the air quality QA value here
  op < _ :QaAirquality | Consider: _, Past: _, Status: _ > : Oid Nat QaList QaStatus -> QaAirquality [format (ntg g g g g g g g g g g g g g)] .




  ****************************************** Rules

  *** The value of the QAs should be computed every time step
  *** TODO How do we ensure that the rule is applied every time step?
  crl [QaEcology] :
    {< E :QaEcology | Value: EC > CONF}
    =>
    {< E :QaEcology | Value: qaEcology(CONF) > CONF}
    if canAdvance(CONF) == true
    [print "QA Ecology = " EC ", rule: [QaEcology]"] .

  crl [QaComfort] :
    {< C :QaComfort | Consider: N, Past: QAL, Status: QAS > CONF}
    =>
    {< C :QaComfort | Consider: N, Past: addToListC(CONF, QAL), Status: computeQA(N, addToListC(CONF, QAL)) > CONF}
    if canAdvance(CONF) == true
    [print "QA Comfort = " QAS ", rule: [QaComfort]"] .

  crl [QaAirquality] :
    {< AQ :QaAirquality | Consider: N, Past: QAL, Status: QAS > CONF}
    =>
    {< AQ :QaAirquality | Consider: N, Past: addToListAq(CONF, QAL), Status: computeQA(N, addToListAq(CONF, QAL)) > CONF}
    if canAdvance(CONF) == true
    [print "QA Air Quality = " QAS ", rule: [QaAirquality]"] .

endm
