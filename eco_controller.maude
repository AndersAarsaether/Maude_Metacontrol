mod ECOCONTROLLER is
  protecting CONTROLLERS .

  vars H W WH T C EC AQ : Oid .
  var DG : Temperature .
  var WS : WindowStatus .
  var AQS : AirqualityStatus .
  var TI : Time .
  var TS : Timesteps .
  vars B B1 B2 : Bool .
  vars A A1 A2 : Attribute .
  vars TL AL : TVPList .

  *** Rules that hold both in the morning and not in the morning
  *** If T ok, AQ not ok -> H off, W open, WH on
  crl [EContrTempOkAqNotOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: false >
    =>
    (msg hOff from EC to H)
    (msg on from EC to WH)
    (msg open from EC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: true >
    if hot?(DG) == false /\ cold?(DG) == false /\ aqok?(AQS) == false
    [print "rule: [EContrTempOkAqNotOk]"] .

  *** If T low, AQ ok -> H very hot, W half open, WH on
  crl [EContrTempLowAqOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: false >
    =>
    (msg veryhot from EC to H)
    (msg on from EC to WH)
    (msg halfopen from EC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: true >
    if cold?(DG) == true /\ aqok?(AQS) == true
    [print "rule: [EContrTempLowAqOk]"] .

  *** If T ok, AQ ok -> H off, W closed, WH on
  crl [EContrTempOkAqOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: false >
    =>
    (msg hOff from EC to H)
    (msg on from EC to WH)
    (msg closed from EC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: true >
    if hot?(DG) == false /\ cold?(DG) == false /\ aqok?(AQS) == true
    [print "rule: [EContrTempOkAqOk]"] .


  *** Not in the morning
  *** If T low, AQ not ok -> H very hot, W half open, WH off
  crl [EContrTempLowAqNotOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: false >
    =>
    (msg veryhot from EC to H)
    (msg whOff from EC to WH)
    (msg halfopen from EC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: true >
    if morning?(TI) == false /\ cold?(DG) == true /\ aqok?(AQS) == false
    [print "rule: [EContrTempLowAqNotOk]"] .

  *** If T high, AQ ok, W not open -> H off, W half open, WH off
  crl [EContrTempHighAqOk1] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: false >
    =>
    (msg hOff from EC to H)
    (msg whOff from EC to WH)
    (msg halfopen from EC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: true >
    if morning?(TI) == false /\ hot?(DG) == true /\ aqok?(AQS) == true /\ WS =/= open
    [print "rule: [EContrTempHighAqOk1]"] .

  *** If T high, AQ ok, W open -> H off, W open, WH off
  crl [EContrTempHighAqOk2] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: false >
    =>
    (msg hOff from EC to H)
    (msg whOff from EC to WH)
    (msg open from EC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | Status: WS, A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: true >
    if morning?(TI) == false /\ hot?(DG) == true /\ aqok?(AQS) == true /\ WS == open
    [print "rule: [EContrTempHighAqOk2]"] .

  *** If T high, AQ not ok -> H off, W open, WH off
  crl [EContrTempHighAqNotOk] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: false >
    =>
    (msg hOff from EC to H)
    (msg whOff from EC to WH)
    (msg open from EC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: true >
    if morning?(TI) == false /\ hot?(DG) == true /\ aqok?(AQS) == false
    [print "rule: [EContrTempHighAqNotOk]"] .





  *** In the morning
  *** If T low, AQ not ok -> H off, W half open, WH on
  crl [EContrTempLowAqNotOkM] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: false >
    =>
    (msg hOff from EC to H)
    (msg on from EC to WH)
    (msg halfopen from EC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < AQ :Airquality | Value: AQS >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: true >
    if morning?(TI) == true /\ cold?(DG) == true /\ aqok?(AQS) == false
    [print "rule: [EContrTempLowAqNotOkM]"] .

  *** if T high -> H off, W open, WH on
  crl [EContrTempHighM] :
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: false >
    =>
    (msg hOff from EC to H)
    (msg on from EC to WH)
    (msg open from EC to W)
    < H :Heater | A >
    < WH :Waterheater | A1 >
    < W :Window | A2 >
    < T :Thermometer | Degrees: DG >
    < C :Clock | Timesteps: TS, Time: TI, TempLog: TL, AqLog: AL >
    < EC :EcoController | Selected: true >
    < Scheduler | Status: ContrChange, TempAqChange: B, McChange: B1, ContrChange: true >
    if morning?(TI) == true /\ hot?(DG) == true
    [print "rule: [EContrTempHighM]"] .

endm
eof
